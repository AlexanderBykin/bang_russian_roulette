// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.orionlab.brr.domain;

import java.io.Serializable;
import java.util.Date;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class RoundPlayer
    implements Serializable, Comparable<RoundPlayer>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -4207967094700053290L;

    // Generate 7 attributes
    private PlayerType playerType;

    /**
     * 
     * @return this.playerType PlayerType
     */
    public PlayerType getPlayerType()
    {
        return this.playerType;
    }

    /**
     * 
     * @param playerTypeIn PlayerType
     */
    public void setPlayerType(PlayerType playerTypeIn)
    {
        this.playerType = playerTypeIn;
    }

    private Integer pos = Integer.valueOf(0);

    /**
     * 
     * @return this.pos Integer
     */
    public Integer getPos()
    {
        return this.pos;
    }

    /**
     * 
     * @param posIn Integer
     */
    public void setPos(Integer posIn)
    {
        this.pos = posIn;
    }

    private PlayerShootDirectionType shootDirection;

    /**
     * 
     * @return this.shootDirection PlayerShootDirectionType
     */
    public PlayerShootDirectionType getShootDirection()
    {
        return this.shootDirection;
    }

    /**
     * 
     * @param shootDirectionIn PlayerShootDirectionType
     */
    public void setShootDirection(PlayerShootDirectionType shootDirectionIn)
    {
        this.shootDirection = shootDirectionIn;
    }

    private Date dateCreate;

    /**
     * 
     * @return this.dateCreate Date
     */
    public Date getDateCreate()
    {
        return this.dateCreate;
    }

    /**
     * 
     * @param dateCreateIn Date
     */
    public void setDateCreate(Date dateCreateIn)
    {
        this.dateCreate = dateCreateIn;
    }

    private Date dateEdit;

    /**
     * 
     * @return this.dateEdit Date
     */
    public Date getDateEdit()
    {
        return this.dateEdit;
    }

    /**
     * 
     * @param dateEditIn Date
     */
    public void setDateEdit(Date dateEditIn)
    {
        this.dateEdit = dateEditIn;
    }

    private Boolean isArchived = Boolean.valueOf(false);

    /**
     * 
     * @return this.isArchived Boolean
     */
    public Boolean getIsArchived()
    {
        return this.isArchived;
    }

    /**
     * 
     * @param isArchivedIn Boolean
     */
    public void setIsArchived(Boolean isArchivedIn)
    {
        this.isArchived = isArchivedIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 2 associations
    private UserSession session;

    /**
     * 
     * @return this.session UserSession
     */
    public UserSession getSession()
    {
        return this.session;
    }

    /**
     * 
     * @param sessionIn UserSession
     */
    public void setSession(UserSession sessionIn)
    {
        this.session = sessionIn;
    }

    private RoomRound round;

    /**
     * 
     * @return this.round RoomRound
     */
    public RoomRound getRound()
    {
        return this.round;
    }

    /**
     * 
     * @param roundIn RoomRound
     */
    public void setRound(RoomRound roundIn)
    {
        this.round = roundIn;
    }

    /**
     * Returns <code>true</code> if the argument is an RoundPlayer instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof RoundPlayer))
        {
            return false;
        }
        final RoundPlayer that = (RoundPlayer)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link RoundPlayer}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link RoundPlayer}.
         * @return new RoundPlayerImpl()
         */
        public static RoundPlayer newInstance()
        {
            return new RoundPlayerImpl();
        }

        /**
         * Constructs a new instance of {@link RoundPlayer}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param playerType PlayerType
         * @param shootDirection PlayerShootDirectionType
         * @param dateCreate Date
         * @param session UserSession
         * @param round RoomRound
         * @return newInstance
         */
        public static RoundPlayer newInstance(PlayerType playerType, PlayerShootDirectionType shootDirection, Date dateCreate, UserSession session, RoomRound round)
        {
            final RoundPlayer entity = new RoundPlayerImpl();
            entity.setPlayerType(playerType);
            entity.setShootDirection(shootDirection);
            entity.setDateCreate(dateCreate);
            entity.setSession(session);
            entity.setRound(round);
            return entity;
        }

        /**
         * Constructs a new instance of {@link RoundPlayer}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param playerType PlayerType
         * @param pos Integer
         * @param shootDirection PlayerShootDirectionType
         * @param dateCreate Date
         * @param dateEdit Date
         * @param isArchived Boolean
         * @param session UserSession
         * @param round RoomRound
         * @return newInstance RoundPlayer
         */
        public static RoundPlayer newInstance(PlayerType playerType, Integer pos, PlayerShootDirectionType shootDirection, Date dateCreate, Date dateEdit, Boolean isArchived, UserSession session, RoomRound round)
        {
            final RoundPlayer entity = new RoundPlayerImpl();
            entity.setPlayerType(playerType);
            entity.setPos(pos);
            entity.setShootDirection(shootDirection);
            entity.setDateCreate(dateCreate);
            entity.setDateEdit(dateEdit);
            entity.setIsArchived(isArchived);
            entity.setSession(session);
            entity.setRound(round);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(RoundPlayer o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getPlayerType() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getPlayerType().compareTo(o.getPlayerType()));
            }
            if (this.getPos() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getPos().compareTo(o.getPos()));
            }
            if (this.getShootDirection() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getShootDirection().compareTo(o.getShootDirection()));
            }
            if (this.getDateCreate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateCreate().compareTo(o.getDateCreate()));
            }
            if (this.getDateEdit() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateEdit().compareTo(o.getDateEdit()));
            }
            if (this.getIsArchived() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIsArchived().compareTo(o.getIsArchived()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}
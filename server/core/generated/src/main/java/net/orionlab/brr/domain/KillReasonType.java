// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: TypeSafeEnumeration.vsl in andromda-java-cartridge.
// Model Class:  AndroMDAModel::net.orionlab.brr::domain::KillReasonType
// Metafacade:   org.andromda.metafacades.uml.Enumeration
// Stereotype:  Enumeration
//
package net.orionlab.brr.domain;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * 
 */
public enum KillReasonType
{
    /** TODO: Model Documentation for Enumeration Literal NONE value "NONE" */
    NONE("NONE"),
    /** TODO: Model Documentation for Enumeration Literal KILLED_BY_PLAYER value "KILLED_BY_PLAYER" */
    KILLED_BY_PLAYER("KILLED_BY_PLAYER"),
    /** TODO: Model Documentation for Enumeration Literal KILLED_BY_KILLER_NOROTATEDRUM value "KILLED_BY_KILLER_NOROTATEDRUM" */
    KILLED_BY_KILLER_NOROTATEDRUM("KILLED_BY_KILLER_NOROTATEDRUM"),
    /** TODO: Model Documentation for Enumeration Literal KILLED_BY_KILLER_NOSHOOT value "KILLED_BY_KILLER_NOSHOOT" */
    KILLED_BY_KILLER_NOSHOOT("KILLED_BY_KILLER_NOSHOOT"),
    /** TODO: Model Documentation for Enumeration Literal KILLED_BY_KILLER_EARLY_SHOOT value "KILLED_BY_KILLER_EARLY_SHOOT" */
    KILLED_BY_KILLER_EARLY_SHOOT("KILLED_BY_KILLER_EARLY_SHOOT"),
    /** TODO: Model Documentation for Enumeration Literal PLAYER_EXIT value "PLAYER_EXIT" */
    PLAYER_EXIT("PLAYER_EXIT"),
    /** TODO: Model Documentation for Enumeration Literal KICKED_BY_MODERATOR value "KICKED_BY_MODERATOR" */
    KICKED_BY_MODERATOR("KICKED_BY_MODERATOR"),
    /** TODO: Model Documentation for Enumeration Literal CHANGE_ROLE value "CHANGE_ROLE" */
    CHANGE_ROLE("CHANGE_ROLE"),
    /** TODO: Model Documentation for Enumeration Literal FREE_AS_NOT_DUELIST value "FREE_AS_NOT_DUELIST" */
    FREE_AS_NOT_DUELIST("FREE_AS_NOT_DUELIST"),
    /** TODO: Model Documentation for Enumeration Literal FREE_AS_WINNER value "FREE_AS_WINNER" */
    FREE_AS_WINNER("FREE_AS_WINNER"),
    /** TODO: Model Documentation for Enumeration Literal KILLED_BY_KILLER_GAMEOVER value "KILLED_BY_KILLER_GAMEOVER" */
    KILLED_BY_KILLER_GAMEOVER("KILLED_BY_KILLER_GAMEOVER"),
    /** TODO: Model Documentation for Enumeration Literal NO_BULLET value "NO_BULLET" */
    NO_BULLET("NO_BULLET"),
    /** TODO: Model Documentation for Enumeration Literal ENEMY_NOT_FOUND value "ENEMY_NOT_FOUND" */
    ENEMY_NOT_FOUND("ENEMY_NOT_FOUND"),
    /** TODO: Model Documentation for Enumeration Literal BROKEN_BULLET value "BROKEN_BULLET" */
    BROKEN_BULLET("BROKEN_BULLET"),
    /** TODO: Model Documentation for Enumeration Literal ENEMY_HAS_HELMET value "ENEMY_HAS_HELMET" */
    ENEMY_HAS_HELMET("ENEMY_HAS_HELMET");

    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -5176529778657503734L;

    private final String enumValue;

    /**
     * The constructor with enumeration literal value allowing
     * super classes to access it.
     */
    private KillReasonType(String value)
    {
        this.enumValue = value;
    }

    /*
     * Do not override this method directly. Use an alternate name
     * if providing a different toString implementation
     * @see Object#toString()
    @Override
    public String toString()
    {
        return String.valueOf(this.enumValue);
    }
     */

    /**
     * Retrieves an instance of KillReasonType from <code>its name</code>.
     *
     * @param name the name to create the KillReasonType from.
     * @return The enumeration literal named after the 'name' argument
     */
    public static KillReasonType fromString(String name)
    {
        return KillReasonType.valueOf(name);
    }

    /**
     * Returns an enumeration literal String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @return String with corresponding value
     */
    public String value()
    {
        return this.enumValue;
    }

    /**
     * Returns an instance of KillReasonType from String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @param value the value to create the KillReasonType from.
     * @return static Enumeration with corresponding value
     */
    public static KillReasonType fromValue(String value)
    {
        for (KillReasonType enumName: KillReasonType.values())
        {
            if (enumName.getValue().equals(value))
            {
                return enumName;
            }
        }
        throw new IllegalArgumentException("KillReasonType.fromValue(" + value + ')');
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     * This method is necessary to comply with DaoBase implementation.
     * @return The name of this literal.
     */
    public String getValue()
    {
        return this.enumValue;
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static List<String> literals()
    {
        return KillReasonType.literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static List<String> names()
    {
        return KillReasonType.names;
    }

    private static Map<String, KillReasonType> values = new LinkedHashMap<String, KillReasonType>(15, 1);
    private static List<String> literals = new ArrayList<String>(15);
    private static List<String> names = new ArrayList<String>(15);
    private static List<KillReasonType> valueList = new ArrayList<KillReasonType>(15);

    /**
     * Initializes the values.
     */
    static
    {
        synchronized (KillReasonType.values)
        {
            KillReasonType.values.put(NONE.enumValue, NONE);
            KillReasonType.values.put(KILLED_BY_PLAYER.enumValue, KILLED_BY_PLAYER);
            KillReasonType.values.put(KILLED_BY_KILLER_NOROTATEDRUM.enumValue, KILLED_BY_KILLER_NOROTATEDRUM);
            KillReasonType.values.put(KILLED_BY_KILLER_NOSHOOT.enumValue, KILLED_BY_KILLER_NOSHOOT);
            KillReasonType.values.put(KILLED_BY_KILLER_EARLY_SHOOT.enumValue, KILLED_BY_KILLER_EARLY_SHOOT);
            KillReasonType.values.put(PLAYER_EXIT.enumValue, PLAYER_EXIT);
            KillReasonType.values.put(KICKED_BY_MODERATOR.enumValue, KICKED_BY_MODERATOR);
            KillReasonType.values.put(CHANGE_ROLE.enumValue, CHANGE_ROLE);
            KillReasonType.values.put(FREE_AS_NOT_DUELIST.enumValue, FREE_AS_NOT_DUELIST);
            KillReasonType.values.put(FREE_AS_WINNER.enumValue, FREE_AS_WINNER);
            KillReasonType.values.put(KILLED_BY_KILLER_GAMEOVER.enumValue, KILLED_BY_KILLER_GAMEOVER);
            KillReasonType.values.put(NO_BULLET.enumValue, NO_BULLET);
            KillReasonType.values.put(ENEMY_NOT_FOUND.enumValue, ENEMY_NOT_FOUND);
            KillReasonType.values.put(BROKEN_BULLET.enumValue, BROKEN_BULLET);
            KillReasonType.values.put(ENEMY_HAS_HELMET.enumValue, ENEMY_HAS_HELMET);
        }
        synchronized (KillReasonType.valueList)
        {
            KillReasonType.valueList.add(NONE);
            KillReasonType.valueList.add(KILLED_BY_PLAYER);
            KillReasonType.valueList.add(KILLED_BY_KILLER_NOROTATEDRUM);
            KillReasonType.valueList.add(KILLED_BY_KILLER_NOSHOOT);
            KillReasonType.valueList.add(KILLED_BY_KILLER_EARLY_SHOOT);
            KillReasonType.valueList.add(PLAYER_EXIT);
            KillReasonType.valueList.add(KICKED_BY_MODERATOR);
            KillReasonType.valueList.add(CHANGE_ROLE);
            KillReasonType.valueList.add(FREE_AS_NOT_DUELIST);
            KillReasonType.valueList.add(FREE_AS_WINNER);
            KillReasonType.valueList.add(KILLED_BY_KILLER_GAMEOVER);
            KillReasonType.valueList.add(NO_BULLET);
            KillReasonType.valueList.add(ENEMY_NOT_FOUND);
            KillReasonType.valueList.add(BROKEN_BULLET);
            KillReasonType.valueList.add(ENEMY_HAS_HELMET);
            KillReasonType.valueList = Collections.unmodifiableList(valueList);
        }
        synchronized (KillReasonType.literals)
        {
            KillReasonType.literals.add(NONE.enumValue);
            KillReasonType.literals.add(KILLED_BY_PLAYER.enumValue);
            KillReasonType.literals.add(KILLED_BY_KILLER_NOROTATEDRUM.enumValue);
            KillReasonType.literals.add(KILLED_BY_KILLER_NOSHOOT.enumValue);
            KillReasonType.literals.add(KILLED_BY_KILLER_EARLY_SHOOT.enumValue);
            KillReasonType.literals.add(PLAYER_EXIT.enumValue);
            KillReasonType.literals.add(KICKED_BY_MODERATOR.enumValue);
            KillReasonType.literals.add(CHANGE_ROLE.enumValue);
            KillReasonType.literals.add(FREE_AS_NOT_DUELIST.enumValue);
            KillReasonType.literals.add(FREE_AS_WINNER.enumValue);
            KillReasonType.literals.add(KILLED_BY_KILLER_GAMEOVER.enumValue);
            KillReasonType.literals.add(NO_BULLET.enumValue);
            KillReasonType.literals.add(ENEMY_NOT_FOUND.enumValue);
            KillReasonType.literals.add(BROKEN_BULLET.enumValue);
            KillReasonType.literals.add(ENEMY_HAS_HELMET.enumValue);
            KillReasonType.literals = Collections.unmodifiableList(literals);
        }
        synchronized (KillReasonType.names)
        {
            KillReasonType.names.add("NONE");
            KillReasonType.names.add("KILLED_BY_PLAYER");
            KillReasonType.names.add("KILLED_BY_KILLER_NOROTATEDRUM");
            KillReasonType.names.add("KILLED_BY_KILLER_NOSHOOT");
            KillReasonType.names.add("KILLED_BY_KILLER_EARLY_SHOOT");
            KillReasonType.names.add("PLAYER_EXIT");
            KillReasonType.names.add("KICKED_BY_MODERATOR");
            KillReasonType.names.add("CHANGE_ROLE");
            KillReasonType.names.add("FREE_AS_NOT_DUELIST");
            KillReasonType.names.add("FREE_AS_WINNER");
            KillReasonType.names.add("KILLED_BY_KILLER_GAMEOVER");
            KillReasonType.names.add("NO_BULLET");
            KillReasonType.names.add("ENEMY_NOT_FOUND");
            KillReasonType.names.add("BROKEN_BULLET");
            KillReasonType.names.add("ENEMY_HAS_HELMET");
            KillReasonType.names = Collections.unmodifiableList(names);
        }
    }
    // type-safe-enumeration-object java merge-point
}
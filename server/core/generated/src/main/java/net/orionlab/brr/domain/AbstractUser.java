// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.orionlab.brr.domain;

import java.io.Serializable;
import java.util.Date;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class AbstractUser
    implements Serializable, Comparable<AbstractUser>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -7862835688011269188L;

    // Generate 14 attributes
    private UserRoleType role;

    /**
     * 
     * @return this.role UserRoleType
     */
    public UserRoleType getRole()
    {
        return this.role;
    }

    /**
     * 
     * @param roleIn UserRoleType
     */
    public void setRole(UserRoleType roleIn)
    {
        this.role = roleIn;
    }

    private AuthType authType;

    /**
     * 
     * @return this.authType AuthType
     */
    public AuthType getAuthType()
    {
        return this.authType;
    }

    /**
     * 
     * @param authTypeIn AuthType
     */
    public void setAuthType(AuthType authTypeIn)
    {
        this.authType = authTypeIn;
    }

    private String email;

    /**
     * 
     * @return this.email String
     */
    public String getEmail()
    {
        return this.email;
    }

    /**
     * 
     * @param emailIn String
     */
    public void setEmail(String emailIn)
    {
        this.email = emailIn;
    }

    private String marketUID;

    /**
     * 
     * @return this.marketUID String
     */
    public String getMarketUID()
    {
        return this.marketUID;
    }

    /**
     * 
     * @param marketUIDIn String
     */
    public void setMarketUID(String marketUIDIn)
    {
        this.marketUID = marketUIDIn;
    }

    private String password;

    /**
     * 
     * @return this.password String
     */
    public String getPassword()
    {
        return this.password;
    }

    /**
     * 
     * @param passwordIn String
     */
    public void setPassword(String passwordIn)
    {
        this.password = passwordIn;
    }

    private String displayName;

    /**
     * 
     * @return this.displayName String
     */
    public String getDisplayName()
    {
        return this.displayName;
    }

    /**
     * 
     * @param displayNameIn String
     */
    public void setDisplayName(String displayNameIn)
    {
        this.displayName = displayNameIn;
    }

    private Boolean isBlocked = Boolean.valueOf(false);

    /**
     * 
     * @return this.isBlocked Boolean
     */
    public Boolean getIsBlocked()
    {
        return this.isBlocked;
    }

    /**
     * 
     * @param isBlockedIn Boolean
     */
    public void setIsBlocked(Boolean isBlockedIn)
    {
        this.isBlocked = isBlockedIn;
    }

    private Boolean isVerify = Boolean.valueOf(false);

    /**
     * 
     * @return this.isVerify Boolean
     */
    public Boolean getIsVerify()
    {
        return this.isVerify;
    }

    /**
     * 
     * @param isVerifyIn Boolean
     */
    public void setIsVerify(Boolean isVerifyIn)
    {
        this.isVerify = isVerifyIn;
    }

    private String verifyCode;

    /**
     * 
     * @return this.verifyCode String
     */
    public String getVerifyCode()
    {
        return this.verifyCode;
    }

    /**
     * 
     * @param verifyCodeIn String
     */
    public void setVerifyCode(String verifyCodeIn)
    {
        this.verifyCode = verifyCodeIn;
    }

    private Date dateLastActivity;

    /**
     * 
     * @return this.dateLastActivity Date
     */
    public Date getDateLastActivity()
    {
        return this.dateLastActivity;
    }

    /**
     * 
     * @param dateLastActivityIn Date
     */
    public void setDateLastActivity(Date dateLastActivityIn)
    {
        this.dateLastActivity = dateLastActivityIn;
    }

    private Date dateCreate;

    /**
     * 
     * @return this.dateCreate Date
     */
    public Date getDateCreate()
    {
        return this.dateCreate;
    }

    /**
     * 
     * @param dateCreateIn Date
     */
    public void setDateCreate(Date dateCreateIn)
    {
        this.dateCreate = dateCreateIn;
    }

    private Date dateEdit;

    /**
     * 
     * @return this.dateEdit Date
     */
    public Date getDateEdit()
    {
        return this.dateEdit;
    }

    /**
     * 
     * @param dateEditIn Date
     */
    public void setDateEdit(Date dateEditIn)
    {
        this.dateEdit = dateEditIn;
    }

    private Boolean isArchived = Boolean.valueOf(false);

    /**
     * 
     * @return this.isArchived Boolean
     */
    public Boolean getIsArchived()
    {
        return this.isArchived;
    }

    /**
     * 
     * @param isArchivedIn Boolean
     */
    public void setIsArchived(Boolean isArchivedIn)
    {
        this.isArchived = isArchivedIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 1 associations
    /**
     * Returns <code>true</code> if the argument is an AbstractUser instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof AbstractUser))
        {
            return false;
        }
        final AbstractUser that = (AbstractUser)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link AbstractUser}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link AbstractUser}.
         * @return new AbstractUserImpl()
         */
        public static AbstractUser newInstance()
        {
            return new AbstractUserImpl();
        }

        /**
         * Constructs a new instance of {@link AbstractUser}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param role UserRoleType
         * @param authType AuthType
         * @param password String
         * @param displayName String
         * @param verifyCode String
         * @param dateLastActivity Date
         * @param dateCreate Date
         * @return newInstance
         */
        public static AbstractUser newInstance(UserRoleType role, AuthType authType, String password, String displayName, String verifyCode, Date dateLastActivity, Date dateCreate)
        {
            final AbstractUser entity = new AbstractUserImpl();
            entity.setRole(role);
            entity.setAuthType(authType);
            entity.setPassword(password);
            entity.setDisplayName(displayName);
            entity.setVerifyCode(verifyCode);
            entity.setDateLastActivity(dateLastActivity);
            entity.setDateCreate(dateCreate);
            return entity;
        }

        /**
         * Constructs a new instance of {@link AbstractUser}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param role UserRoleType
         * @param authType AuthType
         * @param email String
         * @param marketUID String
         * @param password String
         * @param displayName String
         * @param isBlocked Boolean
         * @param isVerify Boolean
         * @param verifyCode String
         * @param dateLastActivity Date
         * @param dateCreate Date
         * @param dateEdit Date
         * @param isArchived Boolean
         * @return newInstance AbstractUser
         */
        public static AbstractUser newInstance(UserRoleType role, AuthType authType, String email, String marketUID, String password, String displayName, Boolean isBlocked, Boolean isVerify, String verifyCode, Date dateLastActivity, Date dateCreate, Date dateEdit, Boolean isArchived)
        {
            final AbstractUser entity = new AbstractUserImpl();
            entity.setRole(role);
            entity.setAuthType(authType);
            entity.setEmail(email);
            entity.setMarketUID(marketUID);
            entity.setPassword(password);
            entity.setDisplayName(displayName);
            entity.setIsBlocked(isBlocked);
            entity.setIsVerify(isVerify);
            entity.setVerifyCode(verifyCode);
            entity.setDateLastActivity(dateLastActivity);
            entity.setDateCreate(dateCreate);
            entity.setDateEdit(dateEdit);
            entity.setIsArchived(isArchived);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(AbstractUser o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getRole() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getRole().compareTo(o.getRole()));
            }
            if (this.getAuthType() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getAuthType().compareTo(o.getAuthType()));
            }
            if (this.getEmail() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getEmail().compareTo(o.getEmail()));
            }
            if (this.getMarketUID() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getMarketUID().compareTo(o.getMarketUID()));
            }
            if (this.getPassword() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getPassword().compareTo(o.getPassword()));
            }
            if (this.getDisplayName() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDisplayName().compareTo(o.getDisplayName()));
            }
            if (this.getIsBlocked() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIsBlocked().compareTo(o.getIsBlocked()));
            }
            if (this.getIsVerify() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIsVerify().compareTo(o.getIsVerify()));
            }
            if (this.getVerifyCode() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getVerifyCode().compareTo(o.getVerifyCode()));
            }
            if (this.getDateLastActivity() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateLastActivity().compareTo(o.getDateLastActivity()));
            }
            if (this.getDateCreate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateCreate().compareTo(o.getDateCreate()));
            }
            if (this.getDateEdit() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateEdit().compareTo(o.getDateEdit()));
            }
            if (this.getIsArchived() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIsArchived().compareTo(o.getIsArchived()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}
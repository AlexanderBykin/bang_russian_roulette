// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateSearchProperties.vsl in andromda-spring-cartridge.
//
package net.orionlab.brr;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import net.orionlab.brr.domain.AbstractUserImpl;
import net.orionlab.brr.domain.PlayerImpl;
import net.orionlab.brr.domain.PlayerPaymentRequestImpl;
import net.orionlab.brr.domain.PlayerShopItemImpl;
import net.orionlab.brr.domain.RoomImpl;
import net.orionlab.brr.domain.RoomRoundImpl;
import net.orionlab.brr.domain.RoundPlayerBetImpl;
import net.orionlab.brr.domain.RoundPlayerBulletImpl;
import net.orionlab.brr.domain.RoundPlayerDuelistImpl;
import net.orionlab.brr.domain.RoundPlayerImpl;
import net.orionlab.brr.domain.RoundPlayerResultImpl;
import net.orionlab.brr.domain.RoundPlayerShootImpl;
import net.orionlab.brr.domain.RoundPlayerUsedItemImpl;
import net.orionlab.brr.domain.ShopItemCollectionImpl;
import net.orionlab.brr.domain.ShopItemCollectionItemImpl;
import net.orionlab.brr.domain.ShopItemImpl;
import net.orionlab.brr.domain.ShopItemLocaleImpl;
import net.orionlab.brr.domain.SystemPropertyImpl;
import net.orionlab.brr.domain.UserSessionImpl;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Predicate;

/**
 * Stores the embedded values and associations of all entities in the system by type.
 * Is used to determine the appropriate parameter name when an embedded value's property
 * is referenced as the attribute to search by (as opposed to an association).
 *
 * @author Chad Brandon
 */
@SuppressWarnings({"unchecked"})
public class CriteriaSearchProperties
{
    private static final Map embeddedValuesByType = new HashMap();
    private static final Map embeddedValueNamesByType = new HashMap();
    private static final Map navigableAssociationEndsByType = new HashMap();

    static
    {
        initializeAbstractUser1();
        initializeUserSession2();
        initializePlayer3();
        initializeRoom4();
        initializeRoomRound5();
        initializeRoundPlayer6();
        initializePlayerPaymentRequest7();
        initializeRoundPlayerBet8();
        initializeRoundPlayerShoot9();
        initializeRoundPlayerBullet10();
        initializeRoundPlayerDuelist11();
        initializeShopItem12();
        initializeShopItemLocale13();
        initializeRoundPlayerUsedItem14();
        initializePlayerShopItem15();
        initializeShopItemCollection16();
        initializeShopItemCollectionItem17();
        initializeSystemProperty18();
        initializeRoundPlayerResult19();
    }

    private static final void initializeAbstractUser1()
    {
        embeddedValueNamesByType.put(
            AbstractUserImpl.class,
            null);
        embeddedValuesByType.put(
            AbstractUserImpl.class,
            null);
        navigableAssociationEndsByType.put(
            AbstractUserImpl.class,
            null);
    }

    private static final void initializeUserSession2()
    {
        embeddedValueNamesByType.put(
            UserSessionImpl.class,
            null);
        embeddedValuesByType.put(
            UserSessionImpl.class,
            null);
        navigableAssociationEndsByType.put(
            UserSessionImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("user", AbstractUserImpl.class)
                }
            )
        );
    }

    private static final void initializePlayer3()
    {
        embeddedValueNamesByType.put(
            PlayerImpl.class,
            null);
        embeddedValuesByType.put(
            PlayerImpl.class,
            null);
        navigableAssociationEndsByType.put(
            PlayerImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("paymentRequests", PlayerPaymentRequestImpl.class),
                    new PropertyType("shopItems", PlayerShopItemImpl.class)
                }
            )
        );
    }

    private static final void initializeRoom4()
    {
        embeddedValueNamesByType.put(
            RoomImpl.class,
            null);
        embeddedValuesByType.put(
            RoomImpl.class,
            null);
        navigableAssociationEndsByType.put(
            RoomImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("rounds", RoomRoundImpl.class)
                }
            )
        );
    }

    private static final void initializeRoomRound5()
    {
        embeddedValueNamesByType.put(
            RoomRoundImpl.class,
            null);
        embeddedValuesByType.put(
            RoomRoundImpl.class,
            null);
        navigableAssociationEndsByType.put(
            RoomRoundImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("players", RoundPlayerImpl.class),
                    new PropertyType("playerBets", RoundPlayerBetImpl.class),
                    new PropertyType("playerShoots", RoundPlayerShootImpl.class),
                    new PropertyType("playerBullets", RoundPlayerBulletImpl.class),
                    new PropertyType("playerDuelists", RoundPlayerDuelistImpl.class),
                    new PropertyType("playerUsedItems", RoundPlayerUsedItemImpl.class),
                    new PropertyType("room", RoomImpl.class),
                    new PropertyType("roundResults", RoundPlayerResultImpl.class)
                }
            )
        );
    }

    private static final void initializeRoundPlayer6()
    {
        embeddedValueNamesByType.put(
            RoundPlayerImpl.class,
            null);
        embeddedValuesByType.put(
            RoundPlayerImpl.class,
            null);
        navigableAssociationEndsByType.put(
            RoundPlayerImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("session", UserSessionImpl.class),
                    new PropertyType("round", RoomRoundImpl.class)
                }
            )
        );
    }

    private static final void initializePlayerPaymentRequest7()
    {
        embeddedValueNamesByType.put(
            PlayerPaymentRequestImpl.class,
            null);
        embeddedValuesByType.put(
            PlayerPaymentRequestImpl.class,
            null);
        navigableAssociationEndsByType.put(
            PlayerPaymentRequestImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("player", PlayerImpl.class)
                }
            )
        );
    }

    private static final void initializeRoundPlayerBet8()
    {
        embeddedValueNamesByType.put(
            RoundPlayerBetImpl.class,
            null);
        embeddedValuesByType.put(
            RoundPlayerBetImpl.class,
            null);
        navigableAssociationEndsByType.put(
            RoundPlayerBetImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("sourcePlayer", PlayerImpl.class),
                    new PropertyType("destPlayer", PlayerImpl.class),
                    new PropertyType("round", RoomRoundImpl.class)
                }
            )
        );
    }

    private static final void initializeRoundPlayerShoot9()
    {
        embeddedValueNamesByType.put(
            RoundPlayerShootImpl.class,
            null);
        embeddedValuesByType.put(
            RoundPlayerShootImpl.class,
            null);
        navigableAssociationEndsByType.put(
            RoundPlayerShootImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("player", PlayerImpl.class),
                    new PropertyType("round", RoomRoundImpl.class)
                }
            )
        );
    }

    private static final void initializeRoundPlayerBullet10()
    {
        embeddedValueNamesByType.put(
            RoundPlayerBulletImpl.class,
            null);
        embeddedValuesByType.put(
            RoundPlayerBulletImpl.class,
            null);
        navigableAssociationEndsByType.put(
            RoundPlayerBulletImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("player", PlayerImpl.class),
                    new PropertyType("round", RoomRoundImpl.class)
                }
            )
        );
    }

    private static final void initializeRoundPlayerDuelist11()
    {
        embeddedValueNamesByType.put(
            RoundPlayerDuelistImpl.class,
            null);
        embeddedValuesByType.put(
            RoundPlayerDuelistImpl.class,
            null);
        navigableAssociationEndsByType.put(
            RoundPlayerDuelistImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("player", PlayerImpl.class),
                    new PropertyType("round", RoomRoundImpl.class)
                }
            )
        );
    }

    private static final void initializeShopItem12()
    {
        embeddedValueNamesByType.put(
            ShopItemImpl.class,
            null);
        embeddedValuesByType.put(
            ShopItemImpl.class,
            null);
        navigableAssociationEndsByType.put(
            ShopItemImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("locales", ShopItemLocaleImpl.class)
                }
            )
        );
    }

    private static final void initializeShopItemLocale13()
    {
        embeddedValueNamesByType.put(
            ShopItemLocaleImpl.class,
            null);
        embeddedValuesByType.put(
            ShopItemLocaleImpl.class,
            null);
        navigableAssociationEndsByType.put(
            ShopItemLocaleImpl.class,
            null);
    }

    private static final void initializeRoundPlayerUsedItem14()
    {
        embeddedValueNamesByType.put(
            RoundPlayerUsedItemImpl.class,
            null);
        embeddedValuesByType.put(
            RoundPlayerUsedItemImpl.class,
            null);
        navigableAssociationEndsByType.put(
            RoundPlayerUsedItemImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("usedItem", ShopItemImpl.class),
                    new PropertyType("sourcePlayer", PlayerImpl.class),
                    new PropertyType("destPlayer", PlayerImpl.class),
                    new PropertyType("round", RoomRoundImpl.class)
                }
            )
        );
    }

    private static final void initializePlayerShopItem15()
    {
        embeddedValueNamesByType.put(
            PlayerShopItemImpl.class,
            null);
        embeddedValuesByType.put(
            PlayerShopItemImpl.class,
            null);
        navigableAssociationEndsByType.put(
            PlayerShopItemImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("shopItem", ShopItemImpl.class),
                    new PropertyType("player", PlayerImpl.class)
                }
            )
        );
    }

    private static final void initializeShopItemCollection16()
    {
        embeddedValueNamesByType.put(
            ShopItemCollectionImpl.class,
            null);
        embeddedValuesByType.put(
            ShopItemCollectionImpl.class,
            null);
        navigableAssociationEndsByType.put(
            ShopItemCollectionImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("items", ShopItemCollectionItemImpl.class),
                    new PropertyType("locales", ShopItemLocaleImpl.class)
                }
            )
        );
    }

    private static final void initializeShopItemCollectionItem17()
    {
        embeddedValueNamesByType.put(
            ShopItemCollectionItemImpl.class,
            null);
        embeddedValuesByType.put(
            ShopItemCollectionItemImpl.class,
            null);
        navigableAssociationEndsByType.put(
            ShopItemCollectionItemImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("item", ShopItemImpl.class)
                }
            )
        );
    }

    private static final void initializeSystemProperty18()
    {
        embeddedValueNamesByType.put(
            SystemPropertyImpl.class,
            null);
        embeddedValuesByType.put(
            SystemPropertyImpl.class,
            null);
        navigableAssociationEndsByType.put(
            SystemPropertyImpl.class,
            null);
    }

    private static final void initializeRoundPlayerResult19()
    {
        embeddedValueNamesByType.put(
            RoundPlayerResultImpl.class,
            null);
        embeddedValuesByType.put(
            RoundPlayerResultImpl.class,
            null);
        navigableAssociationEndsByType.put(
            RoundPlayerResultImpl.class,
            Arrays.asList(
                new PropertyType[]
                {
                    new PropertyType("round", RoomRoundImpl.class),
                    new PropertyType("player", PlayerImpl.class),
                    new PropertyType("killedPlayer", PlayerImpl.class)
                }
            )
        );
    }

    /**
     * Attempts to get the embedded value list for the given type (or returns null
     * if one doesn't exist).
     *
     * @param type the type of which to retrieve the value.
     * @return the collection of embedded value names.
     */
    public static Collection getEmbeddedValues(final Class type)
    {
        return (Collection)embeddedValueNamesByType.get(type);
    }

    /**
     * Gets the type of the navigable association end given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getNavigableAssociationEndType(final Class ownerType, final String name)
    {
        return getPropertyType(navigableAssociationEndsByType, ownerType, name);
    }

    /**
     * Gets the type of the embedded value given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getEmbeddedValueType(final Class ownerType, final String name)
    {
        return getPropertyType(embeddedValuesByType, ownerType, name);
    }

    /**
     * Gets the type of the embedded value given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param properties Map contains the Collection of properties given the ownerType Class
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getPropertyType(final Map properties, final Class ownerType, final String name)
    {
        final Collection ends = (Collection)properties.get(ownerType);
        final PropertyType type = (PropertyType)CollectionUtils.find(
            ends,
            new Predicate()
            {
                public boolean evaluate(final Object object)
                {
                    return ((PropertyType)object).name.equals(name);
                }
            });
        return type != null ? type.type : null;
    }

    /**
     * Gets the type of the property given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getPropertyType(final Class ownerType, final String name)
    {
        Class type = getNavigableAssociationEndType(ownerType, name);
        if (type == null)
        {
            type = getEmbeddedValueType(ownerType, name);
        }
        return type;
    }

    /**
     * A private class storing the name and type.
     */
    protected static final class PropertyType
    {
        /**
         * @param nameIn
         * @param typeIn
         */
        protected PropertyType(final String nameIn, final Class typeIn)
        {
            this.name = nameIn;
            this.type = typeIn;
        }

        /** PropertyType name */
        protected String name;
        /** PropertyType type Class */
        protected Class type;
    }
}
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.orionlab.brr.domain;

import java.io.Serializable;
import java.util.Date;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class RoundPlayerUsedItem
    implements Serializable, Comparable<RoundPlayerUsedItem>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -5583752243302864903L;

    // Generate 4 attributes
    private Date dateCreate;

    /**
     * 
     * @return this.dateCreate Date
     */
    public Date getDateCreate()
    {
        return this.dateCreate;
    }

    /**
     * 
     * @param dateCreateIn Date
     */
    public void setDateCreate(Date dateCreateIn)
    {
        this.dateCreate = dateCreateIn;
    }

    private Date dateEdit;

    /**
     * 
     * @return this.dateEdit Date
     */
    public Date getDateEdit()
    {
        return this.dateEdit;
    }

    /**
     * 
     * @param dateEditIn Date
     */
    public void setDateEdit(Date dateEditIn)
    {
        this.dateEdit = dateEditIn;
    }

    private Boolean isArchived = Boolean.valueOf(false);

    /**
     * 
     * @return this.isArchived Boolean
     */
    public Boolean getIsArchived()
    {
        return this.isArchived;
    }

    /**
     * 
     * @param isArchivedIn Boolean
     */
    public void setIsArchived(Boolean isArchivedIn)
    {
        this.isArchived = isArchivedIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 4 associations
    private ShopItem usedItem;

    /**
     * 
     * @return this.usedItem ShopItem
     */
    public ShopItem getUsedItem()
    {
        return this.usedItem;
    }

    /**
     * 
     * @param usedItemIn ShopItem
     */
    public void setUsedItem(ShopItem usedItemIn)
    {
        this.usedItem = usedItemIn;
    }

    private Player sourcePlayer;

    /**
     * 
     * @return this.sourcePlayer Player
     */
    public Player getSourcePlayer()
    {
        return this.sourcePlayer;
    }

    /**
     * 
     * @param sourcePlayerIn Player
     */
    public void setSourcePlayer(Player sourcePlayerIn)
    {
        this.sourcePlayer = sourcePlayerIn;
    }

    private Player destPlayer;

    /**
     * 
     * @return this.destPlayer Player
     */
    public Player getDestPlayer()
    {
        return this.destPlayer;
    }

    /**
     * 
     * @param destPlayerIn Player
     */
    public void setDestPlayer(Player destPlayerIn)
    {
        this.destPlayer = destPlayerIn;
    }

    private RoomRound round;

    /**
     * 
     * @return this.round RoomRound
     */
    public RoomRound getRound()
    {
        return this.round;
    }

    /**
     * 
     * @param roundIn RoomRound
     */
    public void setRound(RoomRound roundIn)
    {
        this.round = roundIn;
    }

    /**
     * Returns <code>true</code> if the argument is an RoundPlayerUsedItem instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof RoundPlayerUsedItem))
        {
            return false;
        }
        final RoundPlayerUsedItem that = (RoundPlayerUsedItem)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link RoundPlayerUsedItem}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link RoundPlayerUsedItem}.
         * @return new RoundPlayerUsedItemImpl()
         */
        public static RoundPlayerUsedItem newInstance()
        {
            return new RoundPlayerUsedItemImpl();
        }

        /**
         * Constructs a new instance of {@link RoundPlayerUsedItem}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param dateCreate Date
         * @param usedItem ShopItem
         * @param sourcePlayer Player
         * @param destPlayer Player
         * @param round RoomRound
         * @return newInstance
         */
        public static RoundPlayerUsedItem newInstance(Date dateCreate, ShopItem usedItem, Player sourcePlayer, Player destPlayer, RoomRound round)
        {
            final RoundPlayerUsedItem entity = new RoundPlayerUsedItemImpl();
            entity.setDateCreate(dateCreate);
            entity.setUsedItem(usedItem);
            entity.setSourcePlayer(sourcePlayer);
            entity.setDestPlayer(destPlayer);
            entity.setRound(round);
            return entity;
        }

        /**
         * Constructs a new instance of {@link RoundPlayerUsedItem}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param dateCreate Date
         * @param dateEdit Date
         * @param isArchived Boolean
         * @param usedItem ShopItem
         * @param sourcePlayer Player
         * @param destPlayer Player
         * @param round RoomRound
         * @return newInstance RoundPlayerUsedItem
         */
        public static RoundPlayerUsedItem newInstance(Date dateCreate, Date dateEdit, Boolean isArchived, ShopItem usedItem, Player sourcePlayer, Player destPlayer, RoomRound round)
        {
            final RoundPlayerUsedItem entity = new RoundPlayerUsedItemImpl();
            entity.setDateCreate(dateCreate);
            entity.setDateEdit(dateEdit);
            entity.setIsArchived(isArchived);
            entity.setUsedItem(usedItem);
            entity.setSourcePlayer(sourcePlayer);
            entity.setDestPlayer(destPlayer);
            entity.setRound(round);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(RoundPlayerUsedItem o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getDateCreate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateCreate().compareTo(o.getDateCreate()));
            }
            if (this.getDateEdit() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateEdit().compareTo(o.getDateEdit()));
            }
            if (this.getIsArchived() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIsArchived().compareTo(o.getIsArchived()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}
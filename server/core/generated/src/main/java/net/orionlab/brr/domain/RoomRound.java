// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.orionlab.brr.domain;

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class RoomRound
    implements Serializable, Comparable<RoomRound>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -4808805164285919390L;

    // Generate 17 attributes
    private Integer round = Integer.valueOf(0);

    /**
     * 
     * @return this.round Integer
     */
    public Integer getRound()
    {
        return this.round;
    }

    /**
     * 
     * @param roundIn Integer
     */
    public void setRound(Integer roundIn)
    {
        this.round = roundIn;
    }

    private RoomRoundType roundType;

    /**
     * 
     * @return this.roundType RoomRoundType
     */
    public RoomRoundType getRoundType()
    {
        return this.roundType;
    }

    /**
     * 
     * @param roundTypeIn RoomRoundType
     */
    public void setRoundType(RoomRoundType roundTypeIn)
    {
        this.roundType = roundTypeIn;
    }

    private Date stageStartStart;

    /**
     * 
     * @return this.stageStartStart Date
     */
    public Date getStageStartStart()
    {
        return this.stageStartStart;
    }

    /**
     * 
     * @param stageStartStartIn Date
     */
    public void setStageStartStart(Date stageStartStartIn)
    {
        this.stageStartStart = stageStartStartIn;
    }

    private Date stageStartEnd;

    /**
     * 
     * @return this.stageStartEnd Date
     */
    public Date getStageStartEnd()
    {
        return this.stageStartEnd;
    }

    /**
     * 
     * @param stageStartEndIn Date
     */
    public void setStageStartEnd(Date stageStartEndIn)
    {
        this.stageStartEnd = stageStartEndIn;
    }

    private Date stageRotateDrumStart;

    /**
     * 
     * @return this.stageRotateDrumStart Date
     */
    public Date getStageRotateDrumStart()
    {
        return this.stageRotateDrumStart;
    }

    /**
     * 
     * @param stageRotateDrumStartIn Date
     */
    public void setStageRotateDrumStart(Date stageRotateDrumStartIn)
    {
        this.stageRotateDrumStart = stageRotateDrumStartIn;
    }

    private Date stageRotateDrumEnd;

    /**
     * 
     * @return this.stageRotateDrumEnd Date
     */
    public Date getStageRotateDrumEnd()
    {
        return this.stageRotateDrumEnd;
    }

    /**
     * 
     * @param stageRotateDrumEndIn Date
     */
    public void setStageRotateDrumEnd(Date stageRotateDrumEndIn)
    {
        this.stageRotateDrumEnd = stageRotateDrumEndIn;
    }

    private Date stageShootStart;

    /**
     * 
     * @return this.stageShootStart Date
     */
    public Date getStageShootStart()
    {
        return this.stageShootStart;
    }

    /**
     * 
     * @param stageShootStartIn Date
     */
    public void setStageShootStart(Date stageShootStartIn)
    {
        this.stageShootStart = stageShootStartIn;
    }

    private Date stageShootEnd;

    /**
     * 
     * @return this.stageShootEnd Date
     */
    public Date getStageShootEnd()
    {
        return this.stageShootEnd;
    }

    /**
     * 
     * @param stageShootEndIn Date
     */
    public void setStageShootEnd(Date stageShootEndIn)
    {
        this.stageShootEnd = stageShootEndIn;
    }

    private Date stageResultStart;

    /**
     * 
     * @return this.stageResultStart Date
     */
    public Date getStageResultStart()
    {
        return this.stageResultStart;
    }

    /**
     * 
     * @param stageResultStartIn Date
     */
    public void setStageResultStart(Date stageResultStartIn)
    {
        this.stageResultStart = stageResultStartIn;
    }

    private Date stageResultEnd;

    /**
     * 
     * @return this.stageResultEnd Date
     */
    public Date getStageResultEnd()
    {
        return this.stageResultEnd;
    }

    /**
     * 
     * @param stageResultEndIn Date
     */
    public void setStageResultEnd(Date stageResultEndIn)
    {
        this.stageResultEnd = stageResultEndIn;
    }

    private Date stageEndStart;

    /**
     * 
     * @return this.stageEndStart Date
     */
    public Date getStageEndStart()
    {
        return this.stageEndStart;
    }

    /**
     * 
     * @param stageEndStartIn Date
     */
    public void setStageEndStart(Date stageEndStartIn)
    {
        this.stageEndStart = stageEndStartIn;
    }

    private Date stageEndEnd;

    /**
     * 
     * @return this.stageEndEnd Date
     */
    public Date getStageEndEnd()
    {
        return this.stageEndEnd;
    }

    /**
     * 
     * @param stageEndEndIn Date
     */
    public void setStageEndEnd(Date stageEndEndIn)
    {
        this.stageEndEnd = stageEndEndIn;
    }

    private RoundShootDirectionType shootDirection;

    /**
     * 
     * @return this.shootDirection RoundShootDirectionType
     */
    public RoundShootDirectionType getShootDirection()
    {
        return this.shootDirection;
    }

    /**
     * 
     * @param shootDirectionIn RoundShootDirectionType
     */
    public void setShootDirection(RoundShootDirectionType shootDirectionIn)
    {
        this.shootDirection = shootDirectionIn;
    }

    private Boolean isFinish = Boolean.valueOf(false);

    /**
     * 
     * @return this.isFinish Boolean
     */
    public Boolean getIsFinish()
    {
        return this.isFinish;
    }

    /**
     * 
     * @param isFinishIn Boolean
     */
    public void setIsFinish(Boolean isFinishIn)
    {
        this.isFinish = isFinishIn;
    }

    private Date dateCreate;

    /**
     * 
     * @return this.dateCreate Date
     */
    public Date getDateCreate()
    {
        return this.dateCreate;
    }

    /**
     * 
     * @param dateCreateIn Date
     */
    public void setDateCreate(Date dateCreateIn)
    {
        this.dateCreate = dateCreateIn;
    }

    private Date dateEdit;

    /**
     * 
     * @return this.dateEdit Date
     */
    public Date getDateEdit()
    {
        return this.dateEdit;
    }

    /**
     * 
     * @param dateEditIn Date
     */
    public void setDateEdit(Date dateEditIn)
    {
        this.dateEdit = dateEditIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 8 associations
    private Collection<RoundPlayer> players = new HashSet<RoundPlayer>();

    /**
     * 
     * @return this.players Collection<RoundPlayer>
     */
    public Collection<RoundPlayer> getPlayers()
    {
        return this.players;
    }

    /**
     * 
     * @param playersIn Collection<RoundPlayer>
     */
    public void setPlayers(Collection<RoundPlayer> playersIn)
    {
        this.players = playersIn;
    }

    /**
     * 
     * @param elementToAdd RoundPlayer
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addPlayers(RoundPlayer elementToAdd)
    {
        return this.players.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove RoundPlayer
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removePlayers(RoundPlayer elementToRemove)
    {
        return this.players.remove(elementToRemove);
    }

    private Collection<RoundPlayerBet> playerBets = new HashSet<RoundPlayerBet>();

    /**
     * 
     * @return this.playerBets Collection<RoundPlayerBet>
     */
    public Collection<RoundPlayerBet> getPlayerBets()
    {
        return this.playerBets;
    }

    /**
     * 
     * @param playerBetsIn Collection<RoundPlayerBet>
     */
    public void setPlayerBets(Collection<RoundPlayerBet> playerBetsIn)
    {
        this.playerBets = playerBetsIn;
    }

    /**
     * 
     * @param elementToAdd RoundPlayerBet
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addPlayerBets(RoundPlayerBet elementToAdd)
    {
        return this.playerBets.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove RoundPlayerBet
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removePlayerBets(RoundPlayerBet elementToRemove)
    {
        return this.playerBets.remove(elementToRemove);
    }

    private Collection<RoundPlayerShoot> playerShoots = new HashSet<RoundPlayerShoot>();

    /**
     * 
     * @return this.playerShoots Collection<RoundPlayerShoot>
     */
    public Collection<RoundPlayerShoot> getPlayerShoots()
    {
        return this.playerShoots;
    }

    /**
     * 
     * @param playerShootsIn Collection<RoundPlayerShoot>
     */
    public void setPlayerShoots(Collection<RoundPlayerShoot> playerShootsIn)
    {
        this.playerShoots = playerShootsIn;
    }

    /**
     * 
     * @param elementToAdd RoundPlayerShoot
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addPlayerShoots(RoundPlayerShoot elementToAdd)
    {
        return this.playerShoots.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove RoundPlayerShoot
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removePlayerShoots(RoundPlayerShoot elementToRemove)
    {
        return this.playerShoots.remove(elementToRemove);
    }

    private Collection<RoundPlayerBullet> playerBullets = new HashSet<RoundPlayerBullet>();

    /**
     * 
     * @return this.playerBullets Collection<RoundPlayerBullet>
     */
    public Collection<RoundPlayerBullet> getPlayerBullets()
    {
        return this.playerBullets;
    }

    /**
     * 
     * @param playerBulletsIn Collection<RoundPlayerBullet>
     */
    public void setPlayerBullets(Collection<RoundPlayerBullet> playerBulletsIn)
    {
        this.playerBullets = playerBulletsIn;
    }

    /**
     * 
     * @param elementToAdd RoundPlayerBullet
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addPlayerBullets(RoundPlayerBullet elementToAdd)
    {
        return this.playerBullets.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove RoundPlayerBullet
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removePlayerBullets(RoundPlayerBullet elementToRemove)
    {
        return this.playerBullets.remove(elementToRemove);
    }

    private Collection<RoundPlayerDuelist> playerDuelists = new HashSet<RoundPlayerDuelist>();

    /**
     * 
     * @return this.playerDuelists Collection<RoundPlayerDuelist>
     */
    public Collection<RoundPlayerDuelist> getPlayerDuelists()
    {
        return this.playerDuelists;
    }

    /**
     * 
     * @param playerDuelistsIn Collection<RoundPlayerDuelist>
     */
    public void setPlayerDuelists(Collection<RoundPlayerDuelist> playerDuelistsIn)
    {
        this.playerDuelists = playerDuelistsIn;
    }

    /**
     * 
     * @param elementToAdd RoundPlayerDuelist
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addPlayerDuelists(RoundPlayerDuelist elementToAdd)
    {
        return this.playerDuelists.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove RoundPlayerDuelist
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removePlayerDuelists(RoundPlayerDuelist elementToRemove)
    {
        return this.playerDuelists.remove(elementToRemove);
    }

    private Collection<RoundPlayerUsedItem> playerUsedItems = new HashSet<RoundPlayerUsedItem>();

    /**
     * 
     * @return this.playerUsedItems Collection<RoundPlayerUsedItem>
     */
    public Collection<RoundPlayerUsedItem> getPlayerUsedItems()
    {
        return this.playerUsedItems;
    }

    /**
     * 
     * @param playerUsedItemsIn Collection<RoundPlayerUsedItem>
     */
    public void setPlayerUsedItems(Collection<RoundPlayerUsedItem> playerUsedItemsIn)
    {
        this.playerUsedItems = playerUsedItemsIn;
    }

    /**
     * 
     * @param elementToAdd RoundPlayerUsedItem
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addPlayerUsedItems(RoundPlayerUsedItem elementToAdd)
    {
        return this.playerUsedItems.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove RoundPlayerUsedItem
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removePlayerUsedItems(RoundPlayerUsedItem elementToRemove)
    {
        return this.playerUsedItems.remove(elementToRemove);
    }

    private Room room;

    /**
     * 
     * @return this.room Room
     */
    public Room getRoom()
    {
        return this.room;
    }

    /**
     * 
     * @param roomIn Room
     */
    public void setRoom(Room roomIn)
    {
        this.room = roomIn;
    }

    private Collection<RoundPlayerResult> roundResults = new HashSet<RoundPlayerResult>();

    /**
     * 
     * @return this.roundResults Collection<RoundPlayerResult>
     */
    public Collection<RoundPlayerResult> getRoundResults()
    {
        return this.roundResults;
    }

    /**
     * 
     * @param roundResultsIn Collection<RoundPlayerResult>
     */
    public void setRoundResults(Collection<RoundPlayerResult> roundResultsIn)
    {
        this.roundResults = roundResultsIn;
    }

    /**
     * 
     * @param elementToAdd RoundPlayerResult
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addRoundResults(RoundPlayerResult elementToAdd)
    {
        return this.roundResults.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove RoundPlayerResult
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeRoundResults(RoundPlayerResult elementToRemove)
    {
        return this.roundResults.remove(elementToRemove);
    }

    /**
     * Returns <code>true</code> if the argument is an RoomRound instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof RoomRound))
        {
            return false;
        }
        final RoomRound that = (RoomRound)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link RoomRound}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link RoomRound}.
         * @return new RoomRoundImpl()
         */
        public static RoomRound newInstance()
        {
            return new RoomRoundImpl();
        }

        /**
         * Constructs a new instance of {@link RoomRound}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param roundType RoomRoundType
         * @param shootDirection RoundShootDirectionType
         * @param dateCreate Date
         * @param room Room
         * @return newInstance
         */
        public static RoomRound newInstance(RoomRoundType roundType, RoundShootDirectionType shootDirection, Date dateCreate, Room room)
        {
            final RoomRound entity = new RoomRoundImpl();
            entity.setRoundType(roundType);
            entity.setShootDirection(shootDirection);
            entity.setDateCreate(dateCreate);
            entity.setRoom(room);
            return entity;
        }

        /**
         * Constructs a new instance of {@link RoomRound}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param round Integer
         * @param roundType RoomRoundType
         * @param stageStartStart Date
         * @param stageStartEnd Date
         * @param stageRotateDrumStart Date
         * @param stageRotateDrumEnd Date
         * @param stageShootStart Date
         * @param stageShootEnd Date
         * @param stageResultStart Date
         * @param stageResultEnd Date
         * @param stageEndStart Date
         * @param stageEndEnd Date
         * @param shootDirection RoundShootDirectionType
         * @param isFinish Boolean
         * @param dateCreate Date
         * @param dateEdit Date
         * @param players Collection<RoundPlayer>
         * @param playerBets Collection<RoundPlayerBet>
         * @param playerShoots Collection<RoundPlayerShoot>
         * @param playerBullets Collection<RoundPlayerBullet>
         * @param playerDuelists Collection<RoundPlayerDuelist>
         * @param playerUsedItems Collection<RoundPlayerUsedItem>
         * @param room Room
         * @param roundResults Collection<RoundPlayerResult>
         * @return newInstance RoomRound
         */
        public static RoomRound newInstance(Integer round, RoomRoundType roundType, Date stageStartStart, Date stageStartEnd, Date stageRotateDrumStart, Date stageRotateDrumEnd, Date stageShootStart, Date stageShootEnd, Date stageResultStart, Date stageResultEnd, Date stageEndStart, Date stageEndEnd, RoundShootDirectionType shootDirection, Boolean isFinish, Date dateCreate, Date dateEdit, Collection<RoundPlayer> players, Collection<RoundPlayerBet> playerBets, Collection<RoundPlayerShoot> playerShoots, Collection<RoundPlayerBullet> playerBullets, Collection<RoundPlayerDuelist> playerDuelists, Collection<RoundPlayerUsedItem> playerUsedItems, Room room, Collection<RoundPlayerResult> roundResults)
        {
            final RoomRound entity = new RoomRoundImpl();
            entity.setRound(round);
            entity.setRoundType(roundType);
            entity.setStageStartStart(stageStartStart);
            entity.setStageStartEnd(stageStartEnd);
            entity.setStageRotateDrumStart(stageRotateDrumStart);
            entity.setStageRotateDrumEnd(stageRotateDrumEnd);
            entity.setStageShootStart(stageShootStart);
            entity.setStageShootEnd(stageShootEnd);
            entity.setStageResultStart(stageResultStart);
            entity.setStageResultEnd(stageResultEnd);
            entity.setStageEndStart(stageEndStart);
            entity.setStageEndEnd(stageEndEnd);
            entity.setShootDirection(shootDirection);
            entity.setIsFinish(isFinish);
            entity.setDateCreate(dateCreate);
            entity.setDateEdit(dateEdit);
            entity.setPlayers(players);
            entity.setPlayerBets(playerBets);
            entity.setPlayerShoots(playerShoots);
            entity.setPlayerBullets(playerBullets);
            entity.setPlayerDuelists(playerDuelists);
            entity.setPlayerUsedItems(playerUsedItems);
            entity.setRoom(room);
            entity.setRoundResults(roundResults);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(RoomRound o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getRound() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getRound().compareTo(o.getRound()));
            }
            if (this.getRoundType() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getRoundType().compareTo(o.getRoundType()));
            }
            if (this.getStageStartStart() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStageStartStart().compareTo(o.getStageStartStart()));
            }
            if (this.getStageStartEnd() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStageStartEnd().compareTo(o.getStageStartEnd()));
            }
            if (this.getStageRotateDrumStart() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStageRotateDrumStart().compareTo(o.getStageRotateDrumStart()));
            }
            if (this.getStageRotateDrumEnd() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStageRotateDrumEnd().compareTo(o.getStageRotateDrumEnd()));
            }
            if (this.getStageShootStart() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStageShootStart().compareTo(o.getStageShootStart()));
            }
            if (this.getStageShootEnd() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStageShootEnd().compareTo(o.getStageShootEnd()));
            }
            if (this.getStageResultStart() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStageResultStart().compareTo(o.getStageResultStart()));
            }
            if (this.getStageResultEnd() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStageResultEnd().compareTo(o.getStageResultEnd()));
            }
            if (this.getStageEndStart() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStageEndStart().compareTo(o.getStageEndStart()));
            }
            if (this.getStageEndEnd() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getStageEndEnd().compareTo(o.getStageEndEnd()));
            }
            if (this.getShootDirection() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getShootDirection().compareTo(o.getShootDirection()));
            }
            if (this.getIsFinish() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIsFinish().compareTo(o.getIsFinish()));
            }
            if (this.getDateCreate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateCreate().compareTo(o.getDateCreate()));
            }
            if (this.getDateEdit() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateEdit().compareTo(o.getDateEdit()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}
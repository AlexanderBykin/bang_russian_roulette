// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.orionlab.brr.domain;

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class ShopItemCollection
    implements Serializable, Comparable<ShopItemCollection>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -5372595289593148114L;

    // Generate 8 attributes
    private String name;

    /**
     * 
     * @return this.name String
     */
    public String getName()
    {
        return this.name;
    }

    /**
     * 
     * @param nameIn String
     */
    public void setName(String nameIn)
    {
        this.name = nameIn;
    }

    private String imageName;

    /**
     * 
     * @return this.imageName String
     */
    public String getImageName()
    {
        return this.imageName;
    }

    /**
     * 
     * @param imageNameIn String
     */
    public void setImageName(String imageNameIn)
    {
        this.imageName = imageNameIn;
    }

    private Integer cost = Integer.valueOf(0);

    /**
     * 
     * @return this.cost Integer
     */
    public Integer getCost()
    {
        return this.cost;
    }

    /**
     * 
     * @param costIn Integer
     */
    public void setCost(Integer costIn)
    {
        this.cost = costIn;
    }

    private Integer orderNum = Integer.valueOf(0);

    /**
     * 
     * @return this.orderNum Integer
     */
    public Integer getOrderNum()
    {
        return this.orderNum;
    }

    /**
     * 
     * @param orderNumIn Integer
     */
    public void setOrderNum(Integer orderNumIn)
    {
        this.orderNum = orderNumIn;
    }

    private Date dateCreate;

    /**
     * 
     * @return this.dateCreate Date
     */
    public Date getDateCreate()
    {
        return this.dateCreate;
    }

    /**
     * 
     * @param dateCreateIn Date
     */
    public void setDateCreate(Date dateCreateIn)
    {
        this.dateCreate = dateCreateIn;
    }

    private Date dateEdit;

    /**
     * 
     * @return this.dateEdit Date
     */
    public Date getDateEdit()
    {
        return this.dateEdit;
    }

    /**
     * 
     * @param dateEditIn Date
     */
    public void setDateEdit(Date dateEditIn)
    {
        this.dateEdit = dateEditIn;
    }

    private Boolean isArchive = Boolean.valueOf(false);

    /**
     * 
     * @return this.isArchive Boolean
     */
    public Boolean getIsArchive()
    {
        return this.isArchive;
    }

    /**
     * 
     * @param isArchiveIn Boolean
     */
    public void setIsArchive(Boolean isArchiveIn)
    {
        this.isArchive = isArchiveIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 2 associations
    private Collection<ShopItemCollectionItem> items = new HashSet<ShopItemCollectionItem>();

    /**
     * 
     * @return this.items Collection<ShopItemCollectionItem>
     */
    public Collection<ShopItemCollectionItem> getItems()
    {
        return this.items;
    }

    /**
     * 
     * @param itemsIn Collection<ShopItemCollectionItem>
     */
    public void setItems(Collection<ShopItemCollectionItem> itemsIn)
    {
        this.items = itemsIn;
    }

    /**
     * 
     * @param elementToAdd ShopItemCollectionItem
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addItems(ShopItemCollectionItem elementToAdd)
    {
        return this.items.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove ShopItemCollectionItem
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeItems(ShopItemCollectionItem elementToRemove)
    {
        return this.items.remove(elementToRemove);
    }

    private Collection<ShopItemLocale> locales = new HashSet<ShopItemLocale>();

    /**
     * 
     * @return this.locales Collection<ShopItemLocale>
     */
    public Collection<ShopItemLocale> getLocales()
    {
        return this.locales;
    }

    /**
     * 
     * @param localesIn Collection<ShopItemLocale>
     */
    public void setLocales(Collection<ShopItemLocale> localesIn)
    {
        this.locales = localesIn;
    }

    /**
     * 
     * @param elementToAdd ShopItemLocale
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addLocales(ShopItemLocale elementToAdd)
    {
        return this.locales.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove ShopItemLocale
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeLocales(ShopItemLocale elementToRemove)
    {
        return this.locales.remove(elementToRemove);
    }

    /**
     * Returns <code>true</code> if the argument is an ShopItemCollection instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof ShopItemCollection))
        {
            return false;
        }
        final ShopItemCollection that = (ShopItemCollection)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link ShopItemCollection}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link ShopItemCollection}.
         * @return new ShopItemCollectionImpl()
         */
        public static ShopItemCollection newInstance()
        {
            return new ShopItemCollectionImpl();
        }

        /**
         * Constructs a new instance of {@link ShopItemCollection}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param name String
         * @param imageName String
         * @param dateCreate Date
         * @return newInstance
         */
        public static ShopItemCollection newInstance(String name, String imageName, Date dateCreate)
        {
            final ShopItemCollection entity = new ShopItemCollectionImpl();
            entity.setName(name);
            entity.setImageName(imageName);
            entity.setDateCreate(dateCreate);
            return entity;
        }

        /**
         * Constructs a new instance of {@link ShopItemCollection}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param name String
         * @param imageName String
         * @param cost Integer
         * @param orderNum Integer
         * @param dateCreate Date
         * @param dateEdit Date
         * @param isArchive Boolean
         * @param items Collection<ShopItemCollectionItem>
         * @param locales Collection<ShopItemLocale>
         * @return newInstance ShopItemCollection
         */
        public static ShopItemCollection newInstance(String name, String imageName, Integer cost, Integer orderNum, Date dateCreate, Date dateEdit, Boolean isArchive, Collection<ShopItemCollectionItem> items, Collection<ShopItemLocale> locales)
        {
            final ShopItemCollection entity = new ShopItemCollectionImpl();
            entity.setName(name);
            entity.setImageName(imageName);
            entity.setCost(cost);
            entity.setOrderNum(orderNum);
            entity.setDateCreate(dateCreate);
            entity.setDateEdit(dateEdit);
            entity.setIsArchive(isArchive);
            entity.setItems(items);
            entity.setLocales(locales);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(ShopItemCollection o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getName() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getName().compareTo(o.getName()));
            }
            if (this.getImageName() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getImageName().compareTo(o.getImageName()));
            }
            if (this.getCost() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getCost().compareTo(o.getCost()));
            }
            if (this.getOrderNum() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getOrderNum().compareTo(o.getOrderNum()));
            }
            if (this.getDateCreate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateCreate().compareTo(o.getDateCreate()));
            }
            if (this.getDateEdit() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateEdit().compareTo(o.getDateEdit()));
            }
            if (this.getIsArchive() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIsArchive().compareTo(o.getIsArchive()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package net.orionlab.brr.domain;

import java.security.Principal;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import net.orionlab.brr.PrincipalStore;
import net.orionlab.brr.PropertySearch;
import net.orionlab.brr.Search;
import org.andromda.spring.PaginationResult;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.ScrollableResults;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>RoomRound</code>.
 * </p>
 *
 * @see RoomRound
 */
public abstract class RoomRoundDaoBase
    extends HibernateDaoSupport
    implements RoomRoundDao
{
    /**
     * {@inheritDoc}
     */
    @Override
    public Object get(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "RoomRound.get - 'id' can not be null");
        }
        final Object entity = this.getHibernateTemplate().get(RoomRoundImpl.class, id);
        return transformEntity(transform, (RoomRound)entity);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public RoomRound get(Long id)
    {
        return (RoomRound)this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object load(final int transform, final Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "RoomRound.load - 'id' can not be null");
        }
        final Object entity = this.getHibernateTemplate().get(RoomRoundImpl.class, id);
        return transformEntity(transform, (RoomRound)entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoomRound load(Long id)
    {
        return (RoomRound)this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<RoomRound> loadAll()
    {
        return (Collection<RoomRound>) this.loadAll(RoomRoundDao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(RoomRoundDao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final Criteria criteria = this.getSession(false).createCriteria(RoomRoundImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final Collection<?> results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoomRound create(RoomRound roomRound)
    {
        return (RoomRound)this.create(RoomRoundDao.TRANSFORM_NONE, roomRound);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(final int transform, final RoomRound roomRound)
    {
        if (roomRound == null)
        {
            throw new IllegalArgumentException(
                "RoomRound.create - 'roomRound' can not be null");
        }
        this.getHibernateTemplate().save(roomRound);
        return this.transformEntity(transform, roomRound);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({"unchecked"})
    public Collection<RoomRound> create(final Collection<RoomRound> entities)
    {
        return (Collection<RoomRound>) create(RoomRoundDao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Collection<?> create(final int transform, final Collection<RoomRound> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "RoomRound.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().executeWithNativeSession(
            new HibernateCallback()
            {
                public Object doInHibernate(Session session)
                    throws HibernateException
                {
                    for (RoomRound entity : entities)
                    {
                        create(transform, entity);
                    }
                    return null;
                }
            });
        return entities;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoomRound create(
        Integer round,
        RoomRoundType roundType,
        Date stageStartStart,
        Date stageStartEnd,
        Date stageRotateDrumStart,
        Date stageRotateDrumEnd,
        Date stageShootStart,
        Date stageShootEnd,
        Date stageResultStart,
        Date stageResultEnd,
        Date stageEndStart,
        Date stageEndEnd,
        RoundShootDirectionType shootDirection,
        Boolean isFinish,
        Date dateCreate,
        Date dateEdit)
    {
        return (RoomRound)this.create(RoomRoundDao.TRANSFORM_NONE, round, roundType, stageStartStart, stageStartEnd, stageRotateDrumStart, stageRotateDrumEnd, stageShootStart, stageShootEnd, stageResultStart, stageResultEnd, stageEndStart, stageEndEnd, shootDirection, isFinish, dateCreate, dateEdit);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        Integer round,
        RoomRoundType roundType,
        Date stageStartStart,
        Date stageStartEnd,
        Date stageRotateDrumStart,
        Date stageRotateDrumEnd,
        Date stageShootStart,
        Date stageShootEnd,
        Date stageResultStart,
        Date stageResultEnd,
        Date stageEndStart,
        Date stageEndEnd,
        RoundShootDirectionType shootDirection,
        Boolean isFinish,
        Date dateCreate,
        Date dateEdit)
    {
        RoomRound entity = new RoomRoundImpl();
        entity.setRound(round);
        entity.setRoundType(roundType);
        entity.setStageStartStart(stageStartStart);
        entity.setStageStartEnd(stageStartEnd);
        entity.setStageRotateDrumStart(stageRotateDrumStart);
        entity.setStageRotateDrumEnd(stageRotateDrumEnd);
        entity.setStageShootStart(stageShootStart);
        entity.setStageShootEnd(stageShootEnd);
        entity.setStageResultStart(stageResultStart);
        entity.setStageResultEnd(stageResultEnd);
        entity.setStageEndStart(stageEndStart);
        entity.setStageEndEnd(stageEndEnd);
        entity.setShootDirection(shootDirection);
        entity.setIsFinish(isFinish);
        entity.setDateCreate(dateCreate);
        entity.setDateEdit(dateEdit);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoomRound create(
        Date dateCreate,
        Room room,
        RoomRoundType roundType,
        RoundShootDirectionType shootDirection)
    {
        return (RoomRound)this.create(RoomRoundDao.TRANSFORM_NONE, dateCreate, room, roundType, shootDirection);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object create(
        final int transform,
        Date dateCreate,
        Room room,
        RoomRoundType roundType,
        RoundShootDirectionType shootDirection)
    {
        RoomRound entity = new RoomRoundImpl();
        entity.setDateCreate(dateCreate);
        entity.setRoom(room);
        entity.setRoundType(roundType);
        entity.setShootDirection(shootDirection);
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(RoomRound roomRound)
    {
        if (roomRound == null)
        {
            throw new IllegalArgumentException(
                "RoomRound.update - 'roomRound' can not be null");
        }
        this.getHibernateTemplate().update(roomRound);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void update(final Collection<RoomRound> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "RoomRound.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().executeWithNativeSession(
            new HibernateCallback()
            {
                public Object doInHibernate(Session session)
                    throws HibernateException
                {
                    for (RoomRound entity : entities)
                    {
                        update(entity);
                    }
                    return null;
                }
            });
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(RoomRound roomRound)
    {
        if (roomRound == null)
        {
            throw new IllegalArgumentException(
                "RoomRound.remove - 'roomRound' can not be null");
        }
        this.getHibernateTemplate().delete(roomRound);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "RoomRound.remove - 'id' can not be null");
        }
        RoomRound entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void remove(Collection<RoomRound> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "RoomRound.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>RoomRoundDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link RoomRoundDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see RoomRoundDao#transformEntity(int, RoomRound)
     */
    public Object transformEntity(final int transform, final RoomRound entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case RoomRoundDao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transformEntities(final int transform, final Collection<?> entities)
    {
        switch (transform)
        {
            case RoomRoundDao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see RoomRoundDao#toEntities(Collection)
     */
    public void toEntities(final Collection<?> results)
    {
        if (results != null)
        {
            CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link RoomRound}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ENTITYTRANSFORMER =
        new Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object[])
                {
                    result = toEntity((Object[])input);
                }
                else if (input instanceof RoomRound)
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return RoomRound
     */
    protected RoomRound toEntity(Object[] row)
    {
        RoomRound target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row[ctr];
                if (object instanceof RoomRound)
                {
                    target = (RoomRound)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings({ "unchecked" })
    public PaginationResult search(final int transform, final int pageNumber, final int pageSize, final Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final PropertySearch propertySearch = new PropertySearch(
                this.getSession(false), RoomRoundImpl.class, search);
            final List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new PaginationResult(results.toArray(new Object[results.size()]), propertySearch.getTotalCount());
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PaginationResult search(final int pageNumber, final int pageSize, final Search search)
    {
        return this.search(RoomRoundDao.TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Set<?> search(final int transform, final Search search)
    {
        try
        {
            final PropertySearch propertySearch = new PropertySearch(
                this.getSession(false), RoomRoundImpl.class, search);
            final Set<?> results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @SuppressWarnings("unchecked")
    public Set<RoomRound> search(final Search search)
    {
        return (Set<RoomRound>) this.search(RoomRoundDao.TRANSFORM_NONE, search);
    }

    /**
     * Executes and returns the given Hibernate queryObject as a {@link PaginationResult} instance.
     * @param queryObject
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @return PaginationResult
     */
    @SuppressWarnings({ "unchecked" })
    protected PaginationResult getPaginationResult(
        final Query queryObject,
        final int transform, int pageNumber, int pageSize)
    {
        try
        {
            final ScrollableResults scrollableResults = queryObject.scroll();
            scrollableResults.last();
            int totalCount = scrollableResults.getRowNumber();
            totalCount = totalCount >= 0 ? totalCount + 1 : 0;
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            // Unchecked transformation because Set object is reused, cannot be strongly typed.
            Set results = new LinkedHashSet(queryObject.list());
            transformEntities(transform, results);
            return new PaginationResult(results.toArray(new Object[results.size()]), totalCount);
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    // spring-hibernate-dao-base merge-point
}
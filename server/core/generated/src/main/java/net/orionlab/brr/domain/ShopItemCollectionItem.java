// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.orionlab.brr.domain;

import java.io.Serializable;
import java.util.Date;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class ShopItemCollectionItem
    implements Serializable, Comparable<ShopItemCollectionItem>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1942408493690195947L;

    // Generate 5 attributes
    private Integer amount;

    /**
     * 
     * @return this.amount Integer
     */
    public Integer getAmount()
    {
        return this.amount;
    }

    /**
     * 
     * @param amountIn Integer
     */
    public void setAmount(Integer amountIn)
    {
        this.amount = amountIn;
    }

    private Date dateCreate;

    /**
     * 
     * @return this.dateCreate Date
     */
    public Date getDateCreate()
    {
        return this.dateCreate;
    }

    /**
     * 
     * @param dateCreateIn Date
     */
    public void setDateCreate(Date dateCreateIn)
    {
        this.dateCreate = dateCreateIn;
    }

    private Date dateEdit;

    /**
     * 
     * @return this.dateEdit Date
     */
    public Date getDateEdit()
    {
        return this.dateEdit;
    }

    /**
     * 
     * @param dateEditIn Date
     */
    public void setDateEdit(Date dateEditIn)
    {
        this.dateEdit = dateEditIn;
    }

    private Boolean isArchived = Boolean.valueOf(false);

    /**
     * 
     * @return this.isArchived Boolean
     */
    public Boolean getIsArchived()
    {
        return this.isArchived;
    }

    /**
     * 
     * @param isArchivedIn Boolean
     */
    public void setIsArchived(Boolean isArchivedIn)
    {
        this.isArchived = isArchivedIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 2 associations
    private ShopItem item;

    /**
     * 
     * @return this.item ShopItem
     */
    public ShopItem getItem()
    {
        return this.item;
    }

    /**
     * 
     * @param itemIn ShopItem
     */
    public void setItem(ShopItem itemIn)
    {
        this.item = itemIn;
    }

    /**
     * Returns <code>true</code> if the argument is an ShopItemCollectionItem instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof ShopItemCollectionItem))
        {
            return false;
        }
        final ShopItemCollectionItem that = (ShopItemCollectionItem)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link ShopItemCollectionItem}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link ShopItemCollectionItem}.
         * @return new ShopItemCollectionItemImpl()
         */
        public static ShopItemCollectionItem newInstance()
        {
            return new ShopItemCollectionItemImpl();
        }

        /**
         * Constructs a new instance of {@link ShopItemCollectionItem}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param dateCreate Date
         * @param item ShopItem
         * @return newInstance
         */
        public static ShopItemCollectionItem newInstance(Date dateCreate, ShopItem item)
        {
            final ShopItemCollectionItem entity = new ShopItemCollectionItemImpl();
            entity.setDateCreate(dateCreate);
            entity.setItem(item);
            return entity;
        }

        /**
         * Constructs a new instance of {@link ShopItemCollectionItem}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param amount Integer
         * @param dateCreate Date
         * @param dateEdit Date
         * @param isArchived Boolean
         * @param item ShopItem
         * @return newInstance ShopItemCollectionItem
         */
        public static ShopItemCollectionItem newInstance(Integer amount, Date dateCreate, Date dateEdit, Boolean isArchived, ShopItem item)
        {
            final ShopItemCollectionItem entity = new ShopItemCollectionItemImpl();
            entity.setAmount(amount);
            entity.setDateCreate(dateCreate);
            entity.setDateEdit(dateEdit);
            entity.setIsArchived(isArchived);
            entity.setItem(item);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(ShopItemCollectionItem o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getAmount() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getAmount().compareTo(o.getAmount()));
            }
            if (this.getDateCreate() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateCreate().compareTo(o.getDateCreate()));
            }
            if (this.getDateEdit() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getDateEdit().compareTo(o.getDateEdit()));
            }
            if (this.getIsArchived() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIsArchived().compareTo(o.getIsArchived()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}
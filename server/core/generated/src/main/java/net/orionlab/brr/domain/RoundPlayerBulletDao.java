// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package net.orionlab.brr.domain;

import java.util.Collection;
import java.util.Date;
import java.util.Set;
import net.orionlab.brr.Search;
import org.andromda.spring.PaginationResult;

/**
 *
 * @see RoundPlayerBullet
 */
public interface RoundPlayerBulletDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public static final int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link RoundPlayerBullet}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param results the query results.
     */
    public void toEntities(final Collection<?> results);

    /**
     * Gets an instance of RoundPlayerBullet from the persistent store.
     * @param id
     * @return RoundPlayerBullet
     */
    public RoundPlayerBullet get(Long id);

    /**
     * <p>
     * Does the same thing as {@link #get(Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to get.
     * @return either the entity or the object transformed from the entity.
     */
    public Object get(int transform, Long id);

    /**
     * Loads an instance of RoundPlayerBullet from the persistent store.
     * @param id
     * @return RoundPlayerBullet
     */
    public RoundPlayerBullet load(Long id);

    /**
     * <p>
     * Does the same thing as {@link #load(Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, Long id);

    /**
     * Loads all entities of type {@link RoundPlayerBullet}.
     *
     * @return the loaded entities.
     */
    public Collection<RoundPlayerBullet> loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of RoundPlayerBullet and adds it to the persistent store.
     * @param roundPlayerBullet
     * @return RoundPlayerBullet
     */
    public RoundPlayerBullet create(RoundPlayerBullet roundPlayerBullet);

    /**
     * <p>
     * Does the same thing as {@link #create(RoundPlayerBullet)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param roundPlayerBullet
     * @return Object
     */
    public Object create(int transform, RoundPlayerBullet roundPlayerBullet);

    /**
     * Creates a new instance of RoundPlayerBullet and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of RoundPlayerBullet
     * instances to create.
     *
     * @return the created instances.
     */
    public Collection<RoundPlayerBullet> create(Collection<RoundPlayerBullet> entities);

    /**
     * <p>
     * Does the same thing as {@link #create(RoundPlayerBullet)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param entities
     * @return Collection
     */
    public Collection<?> create(int transform, Collection<RoundPlayerBullet> entities);

    /**
     * <p>
     * Creates a new <code>RoundPlayerBullet</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     * @param pistolType 
     * @param b1 
     * @param b2 
     * @param b3 
     * @param b4 
     * @param b5 
     * @param b6 
     * @param b1broken 
     * @param b2broken 
     * @param b3broken 
     * @param b4broken 
     * @param b5broken 
     * @param b6broken 
     * @param b1armored 
     * @param b2armored 
     * @param b3armored 
     * @param b4armored 
     * @param b5armored 
     * @param b6armored 
     * @param dateCreate 
     * @return RoundPlayerBullet
     */
    public RoundPlayerBullet create(
        PistolType pistolType,
        Boolean b1,
        Boolean b2,
        Boolean b3,
        Boolean b4,
        Boolean b5,
        Boolean b6,
        Boolean b1broken,
        Boolean b2broken,
        Boolean b3broken,
        Boolean b4broken,
        Boolean b5broken,
        Boolean b6broken,
        Boolean b1armored,
        Boolean b2armored,
        Boolean b3armored,
        Boolean b4armored,
        Boolean b5armored,
        Boolean b6armored,
        Date dateCreate);

    /**
     * <p>
     * Does the same thing as {@link #create(PistolType, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Date)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param pistolType 
     * @param b1 
     * @param b2 
     * @param b3 
     * @param b4 
     * @param b5 
     * @param b6 
     * @param b1broken 
     * @param b2broken 
     * @param b3broken 
     * @param b4broken 
     * @param b5broken 
     * @param b6broken 
     * @param b1armored 
     * @param b2armored 
     * @param b3armored 
     * @param b4armored 
     * @param b5armored 
     * @param b6armored 
     * @param dateCreate 
     * @return RoundPlayerBullet
     */
    public Object create(
        int transform,
        PistolType pistolType,
        Boolean b1,
        Boolean b2,
        Boolean b3,
        Boolean b4,
        Boolean b5,
        Boolean b6,
        Boolean b1broken,
        Boolean b2broken,
        Boolean b3broken,
        Boolean b4broken,
        Boolean b5broken,
        Boolean b6broken,
        Boolean b1armored,
        Boolean b2armored,
        Boolean b3armored,
        Boolean b4armored,
        Boolean b5armored,
        Boolean b6armored,
        Date dateCreate);

    /**
     * <p>
     * Creates a new <code>RoundPlayerBullet</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
     * @param dateCreate
     * @param pistolType
     * @param player
     * @param round
     * @return RoundPlayerBullet
     */
    public RoundPlayerBullet create(
        Date dateCreate,
        PistolType pistolType,
        Player player,
        RoomRound round);

    /**
     * <p>
     * Does the same thing as {@link #create(PistolType, Date)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform flag to determine transformation type.
     * @param dateCreate
     * @param pistolType
     * @param player
     * @param round
     * @return Object
     */
    public Object create(
        int transform,
        Date dateCreate,
        PistolType pistolType,
        Player player,
        RoomRound round);

    /**
     * Updates the <code>roundPlayerBullet</code> instance in the persistent store.
     * @param roundPlayerBullet
     */
    public void update(RoundPlayerBullet roundPlayerBullet);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities
     */
    public void update(Collection<RoundPlayerBullet> entities);

    /**
     * Removes the instance of RoundPlayerBullet from the persistent store.
     * @param roundPlayerBullet
     */
    public void remove(RoundPlayerBullet roundPlayerBullet);

    /**
     * Removes the instance of RoundPlayerBullet having the given
     * <code>identifier</code> from the persistent store.
     * @param id
     */
    public void remove(Long id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     * @param entities
     */
    public void remove(Collection<RoundPlayerBullet> entities);


    /**
     * Does the same thing as {@link #search(int, Search)} but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param transform the transformation flag.
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link PaginationResult} instance.
     */
    public PaginationResult search(final int transform, final int pageNumber, final int pageSize, final Search search);

    /**
     * Does the same thing as {@link #search(Search)} but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link PaginationResult} instance.
     */
    public PaginationResult search(final int pageNumber, final int pageSize, final Search search);

    /**
     * Does the same thing as {@link #search(Search)} but with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     *
     * @param transform the transformation flag.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public Set<?> search(final int transform, final Search search);

    /**
     * Performs a search using the parameters specified in the given <code>search</code> object.
     *
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public Set<RoundPlayerBullet> search(final Search search);

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>net.orionlab.brr.domain.RoundPlayerBulletDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link net.orionlab.brr.domain.RoundPlayerBulletDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,Collection)
     */
    public Object transformEntity(final int transform, final RoundPlayerBullet entity);

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,RoundPlayerBullet)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>net.orionlab.brr.domain.RoundPlayerBulletDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,RoundPlayerBullet)
     */
    public void transformEntities(final int transform, final Collection<?> entities);

    // spring-dao merge-point
}
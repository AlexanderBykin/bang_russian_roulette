// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.orionlab.brr.domain;

import java.io.Serializable;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class SystemProperty
    implements Serializable, Comparable<SystemProperty>
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -5500934467703806213L;

    // Generate 4 attributes
    private String key;

    /**
     * 
     * @return this.key String
     */
    public String getKey()
    {
        return this.key;
    }

    /**
     * 
     * @param keyIn String
     */
    public void setKey(String keyIn)
    {
        this.key = keyIn;
    }

    private String value;

    /**
     * 
     * @return this.value String
     */
    public String getValue()
    {
        return this.value;
    }

    /**
     * 
     * @param valueIn String
     */
    public void setValue(String valueIn)
    {
        this.value = valueIn;
    }

    private Boolean isEnabled = Boolean.valueOf(true);

    /**
     * 
     * @return this.isEnabled Boolean
     */
    public Boolean getIsEnabled()
    {
        return this.isEnabled;
    }

    /**
     * 
     * @param isEnabledIn Boolean
     */
    public void setIsEnabled(Boolean isEnabledIn)
    {
        this.isEnabled = isEnabledIn;
    }

    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 0 associations
    /**
     * Returns <code>true</code> if the argument is an SystemProperty instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof SystemProperty))
        {
            return false;
        }
        final SystemProperty that = (SystemProperty)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link SystemProperty}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link SystemProperty}.
         * @return new SystemPropertyImpl()
         */
        public static SystemProperty newInstance()
        {
            return new SystemPropertyImpl();
        }

        /**
         * Constructs a new instance of {@link SystemProperty}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param key String
         * @param value String
         * @return newInstance
         */
        public static SystemProperty newInstance(String key, String value)
        {
            final SystemProperty entity = new SystemPropertyImpl();
            entity.setKey(key);
            entity.setValue(value);
            return entity;
        }

        /**
         * Constructs a new instance of {@link SystemProperty}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param key String
         * @param value String
         * @param isEnabled Boolean
         * @return newInstance SystemProperty
         */
        public static SystemProperty newInstance(String key, String value, Boolean isEnabled)
        {
            final SystemProperty entity = new SystemPropertyImpl();
            entity.setKey(key);
            entity.setValue(value);
            entity.setIsEnabled(isEnabled);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(SystemProperty o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getKey() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getKey().compareTo(o.getKey()));
            }
            if (this.getValue() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getValue().compareTo(o.getValue()));
            }
            if (this.getIsEnabled() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getIsEnabled().compareTo(o.getIsEnabled()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}
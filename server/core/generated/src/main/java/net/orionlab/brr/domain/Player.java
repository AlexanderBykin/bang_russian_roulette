// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.orionlab.brr.domain;

import java.util.Collection;
import java.util.Date;
import java.util.HashSet;

/**
 * 
 */
// HibernateEntity.vsl annotations merge-point
public abstract class Player
    extends AbstractUserImpl
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 1863276794374273837L;

    // Generate 4 attributes
    private Integer loses = Integer.valueOf(0);

    /**
     * 
     * @return this.loses Integer
     */
    public Integer getLoses()
    {
        return this.loses;
    }

    /**
     * 
     * @param losesIn Integer
     */
    public void setLoses(Integer losesIn)
    {
        this.loses = losesIn;
    }

    private Integer wins = Integer.valueOf(0);

    /**
     * 
     * @return this.wins Integer
     */
    public Integer getWins()
    {
        return this.wins;
    }

    /**
     * 
     * @param winsIn Integer
     */
    public void setWins(Integer winsIn)
    {
        this.wins = winsIn;
    }

    private Long money = Long.valueOf(0);

    /**
     * 
     * @return this.money Long
     */
    public Long getMoney()
    {
        return this.money;
    }

    /**
     * 
     * @param moneyIn Long
     */
    public void setMoney(Long moneyIn)
    {
        this.money = moneyIn;
    }

    private byte[] avatar;

    /**
     * 
     * @return this.avatar byte[]
     */
    public byte[] getAvatar()
    {
        return this.avatar;
    }

    /**
     * 
     * @param avatarIn byte[]
     */
    public void setAvatar(byte[] avatarIn)
    {
        this.avatar = avatarIn;
    }

    // Generate 11 associations
    private Collection<PlayerPaymentRequest> paymentRequests = new HashSet<PlayerPaymentRequest>();

    /**
     * 
     * @return this.paymentRequests Collection<PlayerPaymentRequest>
     */
    public Collection<PlayerPaymentRequest> getPaymentRequests()
    {
        return this.paymentRequests;
    }

    /**
     * 
     * @param paymentRequestsIn Collection<PlayerPaymentRequest>
     */
    public void setPaymentRequests(Collection<PlayerPaymentRequest> paymentRequestsIn)
    {
        this.paymentRequests = paymentRequestsIn;
    }

    /**
     * 
     * @param elementToAdd PlayerPaymentRequest
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addPaymentRequests(PlayerPaymentRequest elementToAdd)
    {
        return this.paymentRequests.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove PlayerPaymentRequest
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removePaymentRequests(PlayerPaymentRequest elementToRemove)
    {
        return this.paymentRequests.remove(elementToRemove);
    }

    private Collection<PlayerShopItem> shopItems = new HashSet<PlayerShopItem>();

    /**
     * 
     * @return this.shopItems Collection<PlayerShopItem>
     */
    public Collection<PlayerShopItem> getShopItems()
    {
        return this.shopItems;
    }

    /**
     * 
     * @param shopItemsIn Collection<PlayerShopItem>
     */
    public void setShopItems(Collection<PlayerShopItem> shopItemsIn)
    {
        this.shopItems = shopItemsIn;
    }

    /**
     * 
     * @param elementToAdd PlayerShopItem
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean addShopItems(PlayerShopItem elementToAdd)
    {
        return this.shopItems.add(elementToAdd);
    }

    /**
     * 
     * @param elementToRemove PlayerShopItem
     * @return <tt>true</tt> if this collection changed as a result of the
     *         call
     */
    public boolean removeShopItems(PlayerShopItem elementToRemove)
    {
        return this.shopItems.remove(elementToRemove);
    }

    /**
     * This entity does not have any identifiers
     * but since it extends the <code>AbstractUserImpl</code> class
     * it will simply delegate the call up there.
     *
     * @see net.orionlab.brr.domain.AbstractUser#equals(Object)
     */
    @Override
    public boolean equals(Object object)
    {
        return super.equals(object);
    }

    /**
     * This entity does not have any identifiers
     * but since it extends the <code>AbstractUserImpl</code> class
     * it will simply delegate the call up there.
     *
     * @see net.orionlab.brr.domain.AbstractUser#hashCode()
     */
    @Override
    public int hashCode()
    {
        return super.hashCode();
    }

    /**
     * Constructs new instances of {@link Player}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link Player}.
         * @return new PlayerImpl()
         */
        public static Player newInstance()
        {
            return new PlayerImpl();
        }

        /**
         * Constructs a new instance of {@link Player}, taking all required and/or
         * read-only properties as arguments, except for identifiers.
         * @param role UserRoleType
         * @param authType AuthType
         * @param password String
         * @param displayName String
         * @param verifyCode String
         * @param dateLastActivity Date
         * @param dateCreate Date
         * @return newInstance
         */
        public static Player newInstance(UserRoleType role, AuthType authType, String password, String displayName, String verifyCode, Date dateLastActivity, Date dateCreate)
        {
            final Player entity = new PlayerImpl();
            entity.setRole(role);
            entity.setAuthType(authType);
            entity.setPassword(password);
            entity.setDisplayName(displayName);
            entity.setVerifyCode(verifyCode);
            entity.setDateLastActivity(dateLastActivity);
            entity.setDateCreate(dateCreate);
            return entity;
        }

        /**
         * Constructs a new instance of {@link Player}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param role UserRoleType
         * @param authType AuthType
         * @param email String
         * @param marketUID String
         * @param password String
         * @param displayName String
         * @param isBlocked Boolean
         * @param isVerify Boolean
         * @param verifyCode String
         * @param dateLastActivity Date
         * @param dateCreate Date
         * @param dateEdit Date
         * @param isArchived Boolean
         * @param loses Integer
         * @param wins Integer
         * @param money Long
         * @param avatar byte[]
         * @param paymentRequests Collection<PlayerPaymentRequest>
         * @param shopItems Collection<PlayerShopItem>
         * @return newInstance Player
         */
        public static Player newInstance(UserRoleType role, AuthType authType, String email, String marketUID, String password, String displayName, Boolean isBlocked, Boolean isVerify, String verifyCode, Date dateLastActivity, Date dateCreate, Date dateEdit, Boolean isArchived, Integer loses, Integer wins, Long money, byte[] avatar, Collection<PlayerPaymentRequest> paymentRequests, Collection<PlayerShopItem> shopItems)
        {
            final Player entity = new PlayerImpl();
            entity.setRole(role);
            entity.setAuthType(authType);
            entity.setEmail(email);
            entity.setMarketUID(marketUID);
            entity.setPassword(password);
            entity.setDisplayName(displayName);
            entity.setIsBlocked(isBlocked);
            entity.setIsVerify(isVerify);
            entity.setVerifyCode(verifyCode);
            entity.setDateLastActivity(dateLastActivity);
            entity.setDateCreate(dateCreate);
            entity.setDateEdit(dateEdit);
            entity.setIsArchived(isArchived);
            entity.setLoses(loses);
            entity.setWins(wins);
            entity.setMoney(money);
            entity.setAvatar(avatar);
            entity.setPaymentRequests(paymentRequests);
            entity.setShopItems(shopItems);
            return entity;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(Player o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getLoses() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getLoses().compareTo(o.getLoses()));
            }
            if (this.getWins() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getWins().compareTo(o.getWins()));
            }
            if (this.getMoney() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getMoney().compareTo(o.getMoney()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}
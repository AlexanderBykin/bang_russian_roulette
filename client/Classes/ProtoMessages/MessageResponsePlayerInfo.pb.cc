// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageResponsePlayerInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageResponsePlayerInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_MessageResponsePlayerInfo_2eproto() {
  delete MessageResponsePlayerInfo::default_instance_;
  delete MessageResponsePlayerInfo::_default_playeravatar_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MessageResponsePlayerInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MessageResponsePlayerInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MessageResponsePlayerInfo::_default_playeravatar_ =
      new ::std::string("\000", 1);
  MessageResponsePlayerInfo::default_instance_ = new MessageResponsePlayerInfo();
  MessageResponsePlayerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageResponsePlayerInfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MessageResponsePlayerInfo_2eproto_once_);
void protobuf_AddDesc_MessageResponsePlayerInfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MessageResponsePlayerInfo_2eproto_once_,
                 &protobuf_AddDesc_MessageResponsePlayerInfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageResponsePlayerInfo_2eproto {
  StaticDescriptorInitializer_MessageResponsePlayerInfo_2eproto() {
    protobuf_AddDesc_MessageResponsePlayerInfo_2eproto();
  }
} static_descriptor_initializer_MessageResponsePlayerInfo_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForMessageResponsePlayerInfo(
    MessageResponsePlayerInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

::std::string* MessageResponsePlayerInfo::_default_playeravatar_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageResponsePlayerInfo::kPlayerIdFieldNumber;
const int MessageResponsePlayerInfo::kPlayerNameFieldNumber;
const int MessageResponsePlayerInfo::kPlayerWinsFieldNumber;
const int MessageResponsePlayerInfo::kPlayerLosesFieldNumber;
const int MessageResponsePlayerInfo::kRatingPositionFieldNumber;
const int MessageResponsePlayerInfo::kPlayerAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageResponsePlayerInfo::MessageResponsePlayerInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageResponsePlayerInfo)
}

void MessageResponsePlayerInfo::InitAsDefaultInstance() {
}

MessageResponsePlayerInfo::MessageResponsePlayerInfo(const MessageResponsePlayerInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageResponsePlayerInfo)
}

void MessageResponsePlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = GOOGLE_LONGLONG(0);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerwins_ = 0;
  playerloses_ = 0;
  ratingposition_ = 0;
  playeravatar_.UnsafeSetDefault(_default_playeravatar_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponsePlayerInfo::~MessageResponsePlayerInfo() {
  // @@protoc_insertion_point(destructor:MessageResponsePlayerInfo)
  SharedDtor();
}

void MessageResponsePlayerInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playeravatar_.DestroyNoArena(_default_playeravatar_);
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MessageResponsePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessageResponsePlayerInfo& MessageResponsePlayerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageResponsePlayerInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageResponsePlayerInfo_2eproto();
#endif
  return *default_instance_;
}

MessageResponsePlayerInfo* MessageResponsePlayerInfo::default_instance_ = NULL;

MessageResponsePlayerInfo* MessageResponsePlayerInfo::New(::google::protobuf::Arena* arena) const {
  MessageResponsePlayerInfo* n = new MessageResponsePlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageResponsePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageResponsePlayerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MessageResponsePlayerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MessageResponsePlayerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(playerwins_, playerloses_);
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_playername()) {
      playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ratingposition_ = 0;
    if (has_playeravatar()) {
      playeravatar_.ClearToDefaultNoArena(_default_playeravatar_);
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MessageResponsePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForMessageResponsePlayerInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:MessageResponsePlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // required string playerName = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerWins;
        break;
      }

      // required int32 playerWins = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_playerWins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerwins_)));
          set_has_playerwins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerLoses;
        break;
      }

      // required int32 playerLoses = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_playerLoses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerloses_)));
          set_has_playerloses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ratingPosition;
        break;
      }

      // required int32 ratingPosition = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_ratingPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratingposition_)));
          set_has_ratingposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_playerAvatar;
        break;
      }

      // required bytes playerAvatar = 6 [default = "\000"];
      case 6: {
        if (tag == 50) {
         parse_playerAvatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playeravatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageResponsePlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageResponsePlayerInfo)
  return false;
#undef DO_
}

void MessageResponsePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageResponsePlayerInfo)
  // required int64 playerId = 1 [default = 0];
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // required string playerName = 2 [default = ""];
  if (has_playername()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // required int32 playerWins = 3 [default = 0];
  if (has_playerwins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerwins(), output);
  }

  // required int32 playerLoses = 4 [default = 0];
  if (has_playerloses()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playerloses(), output);
  }

  // required int32 ratingPosition = 5 [default = 0];
  if (has_ratingposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ratingposition(), output);
  }

  // required bytes playerAvatar = 6 [default = "\000"];
  if (has_playeravatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->playeravatar(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:MessageResponsePlayerInfo)
}

int MessageResponsePlayerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MessageResponsePlayerInfo)
  int total_size = 0;

  if (has_playerid()) {
    // required int64 playerId = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->playerid());
  }

  if (has_playername()) {
    // required string playerName = 2 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  if (has_playerwins()) {
    // required int32 playerWins = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerwins());
  }

  if (has_playerloses()) {
    // required int32 playerLoses = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerloses());
  }

  if (has_ratingposition()) {
    // required int32 ratingPosition = 5 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ratingposition());
  }

  if (has_playeravatar()) {
    // required bytes playerAvatar = 6 [default = "\000"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->playeravatar());
  }

  return total_size;
}
int MessageResponsePlayerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MessageResponsePlayerInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 playerId = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->playerid());

    // required string playerName = 2 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());

    // required int32 playerWins = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerwins());

    // required int32 playerLoses = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerloses());

    // required int32 ratingPosition = 5 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ratingposition());

    // required bytes playerAvatar = 6 [default = "\000"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->playeravatar());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponsePlayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageResponsePlayerInfo*>(&from));
}

void MessageResponsePlayerInfo::MergeFrom(const MessageResponsePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageResponsePlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_has_playername();
      playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (from.has_playerwins()) {
      set_playerwins(from.playerwins());
    }
    if (from.has_playerloses()) {
      set_playerloses(from.playerloses());
    }
    if (from.has_ratingposition()) {
      set_ratingposition(from.ratingposition());
    }
    if (from.has_playeravatar()) {
      set_has_playeravatar();
      playeravatar_.AssignWithDefault(_default_playeravatar_, from.playeravatar_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void MessageResponsePlayerInfo::CopyFrom(const MessageResponsePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageResponsePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponsePlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MessageResponsePlayerInfo::Swap(MessageResponsePlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageResponsePlayerInfo::InternalSwap(MessageResponsePlayerInfo* other) {
  std::swap(playerid_, other->playerid_);
  playername_.Swap(&other->playername_);
  std::swap(playerwins_, other->playerwins_);
  std::swap(playerloses_, other->playerloses_);
  std::swap(ratingposition_, other->ratingposition_);
  playeravatar_.Swap(&other->playeravatar_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MessageResponsePlayerInfo::GetTypeName() const {
  return "MessageResponsePlayerInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageResponsePlayerInfo

// required int64 playerId = 1 [default = 0];
bool MessageResponsePlayerInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageResponsePlayerInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageResponsePlayerInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageResponsePlayerInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
 ::google::protobuf::int64 MessageResponsePlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:MessageResponsePlayerInfo.playerId)
  return playerid_;
}
 void MessageResponsePlayerInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:MessageResponsePlayerInfo.playerId)
}

// required string playerName = 2 [default = ""];
bool MessageResponsePlayerInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageResponsePlayerInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageResponsePlayerInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageResponsePlayerInfo::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playername();
}
 const ::std::string& MessageResponsePlayerInfo::playername() const {
  // @@protoc_insertion_point(field_get:MessageResponsePlayerInfo.playerName)
  return playername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageResponsePlayerInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageResponsePlayerInfo.playerName)
}
 void MessageResponsePlayerInfo::set_playername(const char* value) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageResponsePlayerInfo.playerName)
}
 void MessageResponsePlayerInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageResponsePlayerInfo.playerName)
}
 ::std::string* MessageResponsePlayerInfo::mutable_playername() {
  set_has_playername();
  // @@protoc_insertion_point(field_mutable:MessageResponsePlayerInfo.playerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageResponsePlayerInfo::release_playername() {
  // @@protoc_insertion_point(field_release:MessageResponsePlayerInfo.playerName)
  clear_has_playername();
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageResponsePlayerInfo::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    set_has_playername();
  } else {
    clear_has_playername();
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:MessageResponsePlayerInfo.playerName)
}

// required int32 playerWins = 3 [default = 0];
bool MessageResponsePlayerInfo::has_playerwins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MessageResponsePlayerInfo::set_has_playerwins() {
  _has_bits_[0] |= 0x00000004u;
}
void MessageResponsePlayerInfo::clear_has_playerwins() {
  _has_bits_[0] &= ~0x00000004u;
}
void MessageResponsePlayerInfo::clear_playerwins() {
  playerwins_ = 0;
  clear_has_playerwins();
}
 ::google::protobuf::int32 MessageResponsePlayerInfo::playerwins() const {
  // @@protoc_insertion_point(field_get:MessageResponsePlayerInfo.playerWins)
  return playerwins_;
}
 void MessageResponsePlayerInfo::set_playerwins(::google::protobuf::int32 value) {
  set_has_playerwins();
  playerwins_ = value;
  // @@protoc_insertion_point(field_set:MessageResponsePlayerInfo.playerWins)
}

// required int32 playerLoses = 4 [default = 0];
bool MessageResponsePlayerInfo::has_playerloses() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MessageResponsePlayerInfo::set_has_playerloses() {
  _has_bits_[0] |= 0x00000008u;
}
void MessageResponsePlayerInfo::clear_has_playerloses() {
  _has_bits_[0] &= ~0x00000008u;
}
void MessageResponsePlayerInfo::clear_playerloses() {
  playerloses_ = 0;
  clear_has_playerloses();
}
 ::google::protobuf::int32 MessageResponsePlayerInfo::playerloses() const {
  // @@protoc_insertion_point(field_get:MessageResponsePlayerInfo.playerLoses)
  return playerloses_;
}
 void MessageResponsePlayerInfo::set_playerloses(::google::protobuf::int32 value) {
  set_has_playerloses();
  playerloses_ = value;
  // @@protoc_insertion_point(field_set:MessageResponsePlayerInfo.playerLoses)
}

// required int32 ratingPosition = 5 [default = 0];
bool MessageResponsePlayerInfo::has_ratingposition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MessageResponsePlayerInfo::set_has_ratingposition() {
  _has_bits_[0] |= 0x00000010u;
}
void MessageResponsePlayerInfo::clear_has_ratingposition() {
  _has_bits_[0] &= ~0x00000010u;
}
void MessageResponsePlayerInfo::clear_ratingposition() {
  ratingposition_ = 0;
  clear_has_ratingposition();
}
 ::google::protobuf::int32 MessageResponsePlayerInfo::ratingposition() const {
  // @@protoc_insertion_point(field_get:MessageResponsePlayerInfo.ratingPosition)
  return ratingposition_;
}
 void MessageResponsePlayerInfo::set_ratingposition(::google::protobuf::int32 value) {
  set_has_ratingposition();
  ratingposition_ = value;
  // @@protoc_insertion_point(field_set:MessageResponsePlayerInfo.ratingPosition)
}

// required bytes playerAvatar = 6 [default = "\000"];
bool MessageResponsePlayerInfo::has_playeravatar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MessageResponsePlayerInfo::set_has_playeravatar() {
  _has_bits_[0] |= 0x00000020u;
}
void MessageResponsePlayerInfo::clear_has_playeravatar() {
  _has_bits_[0] &= ~0x00000020u;
}
void MessageResponsePlayerInfo::clear_playeravatar() {
  playeravatar_.ClearToDefaultNoArena(_default_playeravatar_);
  clear_has_playeravatar();
}
 const ::std::string& MessageResponsePlayerInfo::playeravatar() const {
  // @@protoc_insertion_point(field_get:MessageResponsePlayerInfo.playerAvatar)
  return playeravatar_.GetNoArena(_default_playeravatar_);
}
 void MessageResponsePlayerInfo::set_playeravatar(const ::std::string& value) {
  set_has_playeravatar();
  playeravatar_.SetNoArena(_default_playeravatar_, value);
  // @@protoc_insertion_point(field_set:MessageResponsePlayerInfo.playerAvatar)
}
 void MessageResponsePlayerInfo::set_playeravatar(const char* value) {
  set_has_playeravatar();
  playeravatar_.SetNoArena(_default_playeravatar_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageResponsePlayerInfo.playerAvatar)
}
 void MessageResponsePlayerInfo::set_playeravatar(const void* value, size_t size) {
  set_has_playeravatar();
  playeravatar_.SetNoArena(_default_playeravatar_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageResponsePlayerInfo.playerAvatar)
}
 ::std::string* MessageResponsePlayerInfo::mutable_playeravatar() {
  set_has_playeravatar();
  // @@protoc_insertion_point(field_mutable:MessageResponsePlayerInfo.playerAvatar)
  return playeravatar_.MutableNoArena(_default_playeravatar_);
}
 ::std::string* MessageResponsePlayerInfo::release_playeravatar() {
  // @@protoc_insertion_point(field_release:MessageResponsePlayerInfo.playerAvatar)
  clear_has_playeravatar();
  return playeravatar_.ReleaseNoArena(_default_playeravatar_);
}
 void MessageResponsePlayerInfo::set_allocated_playeravatar(::std::string* playeravatar) {
  if (playeravatar != NULL) {
    set_has_playeravatar();
  } else {
    clear_has_playeravatar();
  }
  playeravatar_.SetAllocatedNoArena(_default_playeravatar_, playeravatar);
  // @@protoc_insertion_point(field_set_allocated:MessageResponsePlayerInfo.playerAvatar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

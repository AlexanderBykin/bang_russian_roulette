// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageResponseRoomInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageResponseRoomInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_MessageResponseRoomInfo_2eproto() {
  delete MessageResponseRoomInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MessageResponseRoomInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MessageResponseRoomInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_RoomShootDirection_2eproto();
  MessageResponseRoomInfo::default_instance_ = new MessageResponseRoomInfo();
  MessageResponseRoomInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageResponseRoomInfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MessageResponseRoomInfo_2eproto_once_);
void protobuf_AddDesc_MessageResponseRoomInfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MessageResponseRoomInfo_2eproto_once_,
                 &protobuf_AddDesc_MessageResponseRoomInfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageResponseRoomInfo_2eproto {
  StaticDescriptorInitializer_MessageResponseRoomInfo_2eproto() {
    protobuf_AddDesc_MessageResponseRoomInfo_2eproto();
  }
} static_descriptor_initializer_MessageResponseRoomInfo_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForMessageResponseRoomInfo(
    MessageResponseRoomInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageResponseRoomInfo::kRoomIdFieldNumber;
const int MessageResponseRoomInfo::kBetFieldNumber;
const int MessageResponseRoomInfo::kAmountPlayersFieldNumber;
const int MessageResponseRoomInfo::kMaxPlayersFieldNumber;
const int MessageResponseRoomInfo::kCurrentRoundFieldNumber;
const int MessageResponseRoomInfo::kMaxRoundsFieldNumber;
const int MessageResponseRoomInfo::kPlayerbankFieldNumber;
const int MessageResponseRoomInfo::kInvestorbankFieldNumber;
const int MessageResponseRoomInfo::kIsGameStartedFieldNumber;
const int MessageResponseRoomInfo::kShootDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageResponseRoomInfo::MessageResponseRoomInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageResponseRoomInfo)
}

void MessageResponseRoomInfo::InitAsDefaultInstance() {
}

MessageResponseRoomInfo::MessageResponseRoomInfo(const MessageResponseRoomInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageResponseRoomInfo)
}

void MessageResponseRoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_ = GOOGLE_LONGLONG(0);
  bet_ = 0;
  amountplayers_ = 0;
  maxplayers_ = 0;
  currentround_ = 0;
  maxrounds_ = 0;
  playerbank_ = GOOGLE_LONGLONG(0);
  investorbank_ = GOOGLE_LONGLONG(0);
  isgamestarted_ = false;
  shootdirection_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageResponseRoomInfo::~MessageResponseRoomInfo() {
  // @@protoc_insertion_point(destructor:MessageResponseRoomInfo)
  SharedDtor();
}

void MessageResponseRoomInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MessageResponseRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessageResponseRoomInfo& MessageResponseRoomInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MessageResponseRoomInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MessageResponseRoomInfo_2eproto();
#endif
  return *default_instance_;
}

MessageResponseRoomInfo* MessageResponseRoomInfo::default_instance_ = NULL;

MessageResponseRoomInfo* MessageResponseRoomInfo::New(::google::protobuf::Arena* arena) const {
  MessageResponseRoomInfo* n = new MessageResponseRoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageResponseRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageResponseRoomInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MessageResponseRoomInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MessageResponseRoomInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(roomid_, maxrounds_);
    investorbank_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 768u) {
    isgamestarted_ = false;
    shootdirection_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MessageResponseRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForMessageResponseRoomInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:MessageResponseRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roomId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bet;
        break;
      }

      // required int32 bet = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bet_)));
          set_has_bet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_amountPlayers;
        break;
      }

      // required int32 amountPlayers = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_amountPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amountplayers_)));
          set_has_amountplayers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxPlayers;
        break;
      }

      // required int32 maxPlayers = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_maxPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));
          set_has_maxplayers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_currentRound;
        break;
      }

      // required int32 currentRound = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_currentRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentround_)));
          set_has_currentround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxRounds;
        break;
      }

      // required int32 maxRounds = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_maxRounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrounds_)));
          set_has_maxrounds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_playerbank;
        break;
      }

      // required int64 playerbank = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_playerbank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerbank_)));
          set_has_playerbank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_investorbank;
        break;
      }

      // required int64 investorbank = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_investorbank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &investorbank_)));
          set_has_investorbank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_isGameStarted;
        break;
      }

      // required bool isGameStarted = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_isGameStarted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgamestarted_)));
          set_has_isgamestarted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_shootDirection;
        break;
      }

      // required .RoomShootDirection shootDirection = 11 [default = rsdLEFT];
      case 11: {
        if (tag == 88) {
         parse_shootDirection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RoomShootDirection_IsValid(value)) {
            set_shootdirection(static_cast< ::RoomShootDirection >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageResponseRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageResponseRoomInfo)
  return false;
#undef DO_
}

void MessageResponseRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageResponseRoomInfo)
  // required int64 roomId = 1 [default = 0];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roomid(), output);
  }

  // required int32 bet = 2 [default = 0];
  if (has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bet(), output);
  }

  // required int32 amountPlayers = 4 [default = 0];
  if (has_amountplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->amountplayers(), output);
  }

  // required int32 maxPlayers = 5 [default = 0];
  if (has_maxplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxplayers(), output);
  }

  // required int32 currentRound = 6 [default = 0];
  if (has_currentround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currentround(), output);
  }

  // required int32 maxRounds = 7 [default = 0];
  if (has_maxrounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxrounds(), output);
  }

  // required int64 playerbank = 8 [default = 0];
  if (has_playerbank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->playerbank(), output);
  }

  // required int64 investorbank = 9 [default = 0];
  if (has_investorbank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->investorbank(), output);
  }

  // required bool isGameStarted = 10 [default = false];
  if (has_isgamestarted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isgamestarted(), output);
  }

  // required .RoomShootDirection shootDirection = 11 [default = rsdLEFT];
  if (has_shootdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->shootdirection(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:MessageResponseRoomInfo)
}

int MessageResponseRoomInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MessageResponseRoomInfo)
  int total_size = 0;

  if (has_roomid()) {
    // required int64 roomId = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomid());
  }

  if (has_bet()) {
    // required int32 bet = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bet());
  }

  if (has_amountplayers()) {
    // required int32 amountPlayers = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amountplayers());
  }

  if (has_maxplayers()) {
    // required int32 maxPlayers = 5 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxplayers());
  }

  if (has_currentround()) {
    // required int32 currentRound = 6 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currentround());
  }

  if (has_maxrounds()) {
    // required int32 maxRounds = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxrounds());
  }

  if (has_playerbank()) {
    // required int64 playerbank = 8 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->playerbank());
  }

  if (has_investorbank()) {
    // required int64 investorbank = 9 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->investorbank());
  }

  if (has_isgamestarted()) {
    // required bool isGameStarted = 10 [default = false];
    total_size += 1 + 1;
  }

  if (has_shootdirection()) {
    // required .RoomShootDirection shootDirection = 11 [default = rsdLEFT];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shootdirection());
  }

  return total_size;
}
int MessageResponseRoomInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MessageResponseRoomInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required int64 roomId = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomid());

    // required int32 bet = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bet());

    // required int32 amountPlayers = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amountplayers());

    // required int32 maxPlayers = 5 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxplayers());

    // required int32 currentRound = 6 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currentround());

    // required int32 maxRounds = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxrounds());

    // required int64 playerbank = 8 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->playerbank());

    // required int64 investorbank = 9 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->investorbank());

    // required bool isGameStarted = 10 [default = false];
    total_size += 1 + 1;

    // required .RoomShootDirection shootDirection = 11 [default = rsdLEFT];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shootdirection());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageResponseRoomInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageResponseRoomInfo*>(&from));
}

void MessageResponseRoomInfo::MergeFrom(const MessageResponseRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageResponseRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_bet()) {
      set_bet(from.bet());
    }
    if (from.has_amountplayers()) {
      set_amountplayers(from.amountplayers());
    }
    if (from.has_maxplayers()) {
      set_maxplayers(from.maxplayers());
    }
    if (from.has_currentround()) {
      set_currentround(from.currentround());
    }
    if (from.has_maxrounds()) {
      set_maxrounds(from.maxrounds());
    }
    if (from.has_playerbank()) {
      set_playerbank(from.playerbank());
    }
    if (from.has_investorbank()) {
      set_investorbank(from.investorbank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isgamestarted()) {
      set_isgamestarted(from.isgamestarted());
    }
    if (from.has_shootdirection()) {
      set_shootdirection(from.shootdirection());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void MessageResponseRoomInfo::CopyFrom(const MessageResponseRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageResponseRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageResponseRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void MessageResponseRoomInfo::Swap(MessageResponseRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageResponseRoomInfo::InternalSwap(MessageResponseRoomInfo* other) {
  std::swap(roomid_, other->roomid_);
  std::swap(bet_, other->bet_);
  std::swap(amountplayers_, other->amountplayers_);
  std::swap(maxplayers_, other->maxplayers_);
  std::swap(currentround_, other->currentround_);
  std::swap(maxrounds_, other->maxrounds_);
  std::swap(playerbank_, other->playerbank_);
  std::swap(investorbank_, other->investorbank_);
  std::swap(isgamestarted_, other->isgamestarted_);
  std::swap(shootdirection_, other->shootdirection_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MessageResponseRoomInfo::GetTypeName() const {
  return "MessageResponseRoomInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageResponseRoomInfo

// required int64 roomId = 1 [default = 0];
bool MessageResponseRoomInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageResponseRoomInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageResponseRoomInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageResponseRoomInfo::clear_roomid() {
  roomid_ = GOOGLE_LONGLONG(0);
  clear_has_roomid();
}
 ::google::protobuf::int64 MessageResponseRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:MessageResponseRoomInfo.roomId)
  return roomid_;
}
 void MessageResponseRoomInfo::set_roomid(::google::protobuf::int64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:MessageResponseRoomInfo.roomId)
}

// required int32 bet = 2 [default = 0];
bool MessageResponseRoomInfo::has_bet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageResponseRoomInfo::set_has_bet() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageResponseRoomInfo::clear_has_bet() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageResponseRoomInfo::clear_bet() {
  bet_ = 0;
  clear_has_bet();
}
 ::google::protobuf::int32 MessageResponseRoomInfo::bet() const {
  // @@protoc_insertion_point(field_get:MessageResponseRoomInfo.bet)
  return bet_;
}
 void MessageResponseRoomInfo::set_bet(::google::protobuf::int32 value) {
  set_has_bet();
  bet_ = value;
  // @@protoc_insertion_point(field_set:MessageResponseRoomInfo.bet)
}

// required int32 amountPlayers = 4 [default = 0];
bool MessageResponseRoomInfo::has_amountplayers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MessageResponseRoomInfo::set_has_amountplayers() {
  _has_bits_[0] |= 0x00000004u;
}
void MessageResponseRoomInfo::clear_has_amountplayers() {
  _has_bits_[0] &= ~0x00000004u;
}
void MessageResponseRoomInfo::clear_amountplayers() {
  amountplayers_ = 0;
  clear_has_amountplayers();
}
 ::google::protobuf::int32 MessageResponseRoomInfo::amountplayers() const {
  // @@protoc_insertion_point(field_get:MessageResponseRoomInfo.amountPlayers)
  return amountplayers_;
}
 void MessageResponseRoomInfo::set_amountplayers(::google::protobuf::int32 value) {
  set_has_amountplayers();
  amountplayers_ = value;
  // @@protoc_insertion_point(field_set:MessageResponseRoomInfo.amountPlayers)
}

// required int32 maxPlayers = 5 [default = 0];
bool MessageResponseRoomInfo::has_maxplayers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MessageResponseRoomInfo::set_has_maxplayers() {
  _has_bits_[0] |= 0x00000008u;
}
void MessageResponseRoomInfo::clear_has_maxplayers() {
  _has_bits_[0] &= ~0x00000008u;
}
void MessageResponseRoomInfo::clear_maxplayers() {
  maxplayers_ = 0;
  clear_has_maxplayers();
}
 ::google::protobuf::int32 MessageResponseRoomInfo::maxplayers() const {
  // @@protoc_insertion_point(field_get:MessageResponseRoomInfo.maxPlayers)
  return maxplayers_;
}
 void MessageResponseRoomInfo::set_maxplayers(::google::protobuf::int32 value) {
  set_has_maxplayers();
  maxplayers_ = value;
  // @@protoc_insertion_point(field_set:MessageResponseRoomInfo.maxPlayers)
}

// required int32 currentRound = 6 [default = 0];
bool MessageResponseRoomInfo::has_currentround() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MessageResponseRoomInfo::set_has_currentround() {
  _has_bits_[0] |= 0x00000010u;
}
void MessageResponseRoomInfo::clear_has_currentround() {
  _has_bits_[0] &= ~0x00000010u;
}
void MessageResponseRoomInfo::clear_currentround() {
  currentround_ = 0;
  clear_has_currentround();
}
 ::google::protobuf::int32 MessageResponseRoomInfo::currentround() const {
  // @@protoc_insertion_point(field_get:MessageResponseRoomInfo.currentRound)
  return currentround_;
}
 void MessageResponseRoomInfo::set_currentround(::google::protobuf::int32 value) {
  set_has_currentround();
  currentround_ = value;
  // @@protoc_insertion_point(field_set:MessageResponseRoomInfo.currentRound)
}

// required int32 maxRounds = 7 [default = 0];
bool MessageResponseRoomInfo::has_maxrounds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MessageResponseRoomInfo::set_has_maxrounds() {
  _has_bits_[0] |= 0x00000020u;
}
void MessageResponseRoomInfo::clear_has_maxrounds() {
  _has_bits_[0] &= ~0x00000020u;
}
void MessageResponseRoomInfo::clear_maxrounds() {
  maxrounds_ = 0;
  clear_has_maxrounds();
}
 ::google::protobuf::int32 MessageResponseRoomInfo::maxrounds() const {
  // @@protoc_insertion_point(field_get:MessageResponseRoomInfo.maxRounds)
  return maxrounds_;
}
 void MessageResponseRoomInfo::set_maxrounds(::google::protobuf::int32 value) {
  set_has_maxrounds();
  maxrounds_ = value;
  // @@protoc_insertion_point(field_set:MessageResponseRoomInfo.maxRounds)
}

// required int64 playerbank = 8 [default = 0];
bool MessageResponseRoomInfo::has_playerbank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MessageResponseRoomInfo::set_has_playerbank() {
  _has_bits_[0] |= 0x00000040u;
}
void MessageResponseRoomInfo::clear_has_playerbank() {
  _has_bits_[0] &= ~0x00000040u;
}
void MessageResponseRoomInfo::clear_playerbank() {
  playerbank_ = GOOGLE_LONGLONG(0);
  clear_has_playerbank();
}
 ::google::protobuf::int64 MessageResponseRoomInfo::playerbank() const {
  // @@protoc_insertion_point(field_get:MessageResponseRoomInfo.playerbank)
  return playerbank_;
}
 void MessageResponseRoomInfo::set_playerbank(::google::protobuf::int64 value) {
  set_has_playerbank();
  playerbank_ = value;
  // @@protoc_insertion_point(field_set:MessageResponseRoomInfo.playerbank)
}

// required int64 investorbank = 9 [default = 0];
bool MessageResponseRoomInfo::has_investorbank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MessageResponseRoomInfo::set_has_investorbank() {
  _has_bits_[0] |= 0x00000080u;
}
void MessageResponseRoomInfo::clear_has_investorbank() {
  _has_bits_[0] &= ~0x00000080u;
}
void MessageResponseRoomInfo::clear_investorbank() {
  investorbank_ = GOOGLE_LONGLONG(0);
  clear_has_investorbank();
}
 ::google::protobuf::int64 MessageResponseRoomInfo::investorbank() const {
  // @@protoc_insertion_point(field_get:MessageResponseRoomInfo.investorbank)
  return investorbank_;
}
 void MessageResponseRoomInfo::set_investorbank(::google::protobuf::int64 value) {
  set_has_investorbank();
  investorbank_ = value;
  // @@protoc_insertion_point(field_set:MessageResponseRoomInfo.investorbank)
}

// required bool isGameStarted = 10 [default = false];
bool MessageResponseRoomInfo::has_isgamestarted() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MessageResponseRoomInfo::set_has_isgamestarted() {
  _has_bits_[0] |= 0x00000100u;
}
void MessageResponseRoomInfo::clear_has_isgamestarted() {
  _has_bits_[0] &= ~0x00000100u;
}
void MessageResponseRoomInfo::clear_isgamestarted() {
  isgamestarted_ = false;
  clear_has_isgamestarted();
}
 bool MessageResponseRoomInfo::isgamestarted() const {
  // @@protoc_insertion_point(field_get:MessageResponseRoomInfo.isGameStarted)
  return isgamestarted_;
}
 void MessageResponseRoomInfo::set_isgamestarted(bool value) {
  set_has_isgamestarted();
  isgamestarted_ = value;
  // @@protoc_insertion_point(field_set:MessageResponseRoomInfo.isGameStarted)
}

// required .RoomShootDirection shootDirection = 11 [default = rsdLEFT];
bool MessageResponseRoomInfo::has_shootdirection() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MessageResponseRoomInfo::set_has_shootdirection() {
  _has_bits_[0] |= 0x00000200u;
}
void MessageResponseRoomInfo::clear_has_shootdirection() {
  _has_bits_[0] &= ~0x00000200u;
}
void MessageResponseRoomInfo::clear_shootdirection() {
  shootdirection_ = 0;
  clear_has_shootdirection();
}
 ::RoomShootDirection MessageResponseRoomInfo::shootdirection() const {
  // @@protoc_insertion_point(field_get:MessageResponseRoomInfo.shootDirection)
  return static_cast< ::RoomShootDirection >(shootdirection_);
}
 void MessageResponseRoomInfo::set_shootdirection(::RoomShootDirection value) {
  assert(::RoomShootDirection_IsValid(value));
  set_has_shootdirection();
  shootdirection_ = value;
  // @@protoc_insertion_point(field_set:MessageResponseRoomInfo.shootDirection)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
